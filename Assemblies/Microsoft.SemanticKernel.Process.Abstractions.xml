<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.SemanticKernel.Process.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Microsoft.SemanticKernel.IExternalKernelProcessMessageChannel">
            <summary>
            An interface that provides a channel for emitting external messages from a step.
            In addition provide common methods like initialization and Uninitialization
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.IExternalKernelProcessMessageChannel.Initialize">
            <summary>
            Initialization of the external messaging channel used
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/></returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.IExternalKernelProcessMessageChannel.Uninitialize">
            <summary>
            Uninitialization of the external messaging channel used
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/></returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.IExternalKernelProcessMessageChannel.EmitExternalEventAsync(System.String,Microsoft.SemanticKernel.KernelProcessProxyMessage)">
            <summary>
            Emits the specified event from the step outside the SK process
            </summary>
            <param name="externalTopicEvent">name of the topic to be used externally as the event name</param>
            <param name="message">data to be transmitted externally</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.IKernelProcessMessageChannel">
            <summary>
            An interface that provides a channel for emitting messages from a step.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.IKernelProcessMessageChannel.EmitEventAsync(Microsoft.SemanticKernel.KernelProcessEvent)">
            <summary>
            Emits the specified event from the step.
            </summary>
            <param name="processEvent">The event to emit.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/></returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Process.Internal.KernelProcessStepMetadataFactory">
            <summary>
            Factory that help extract <see cref="T:Microsoft.SemanticKernel.Process.KernelProcessStepMetadataAttribute"/>
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Process.Internal.KernelProcessStepMetadataFactory.ExtractProcessStepMetadataFromType(System.Type)">
            <summary>
            Extracts <see cref="T:Microsoft.SemanticKernel.Process.KernelProcessStepMetadataAttribute"/> from annotations on a <see cref="T:Microsoft.SemanticKernel.KernelProcessStep"/> based class.
            </summary>
            <param name="stepType">specific step type</param>
            <returns><see cref="T:Microsoft.SemanticKernel.Process.KernelProcessStepMetadataAttribute"/></returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Process.Internal.JMESPathConditionEvaluator.EvaluateToString(System.Object,System.String)">
            <summary>
            Evaluates a JMESPath expression on a state object and returns the result as a string.
            </summary>
            <param name="data">The state object to evaluate against</param>
            <param name="jmesPathExpression">The JMESPath expression</param>
            <returns>The string result, or null if the result is null or cannot be converted to a string</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Process.Internal.ProcessStateMetadataFactory.KernelProcessToProcessStateMetadata(Microsoft.SemanticKernel.KernelProcess)">
            <summary>
            Captures Kernel Process State into <see cref="T:Microsoft.SemanticKernel.Process.Models.KernelProcessStateMetadata"/>
            </summary>
            <returns><see cref="T:Microsoft.SemanticKernel.Process.Models.KernelProcessStateMetadata"/></returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Process.Internal.ProcessStateMetadataFactory.StepInfoToProcessStateMetadata(Microsoft.SemanticKernel.KernelProcessStepInfo)">
            <summary>
            Captures Kernel Process Step State into <see cref="T:Microsoft.SemanticKernel.Process.Models.KernelProcessStateMetadata"/>
            </summary>
            <returns><see cref="T:Microsoft.SemanticKernel.Process.Models.KernelProcessStateMetadata"/></returns>
        </member>
        <member name="F:Microsoft.SemanticKernel.Process.Internal.KernelProcessStepExtensions.s_genericStepType">
            <summary>
            The generic state type for a process step.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Process.Internal.KernelProcessStepExtensions.TryGetSubtypeOfStatefulStep(System.Type,System.Type@)">
            <summary>
            Attempts to find an instance of <![CDATA['KernelProcessStep<>']]> within the provided types hierarchy.
            </summary>
            <param name="type">The type to examine.</param>
            <param name="genericStateType">The matching type if found, otherwise null.</param>
            <returns>True if a match is found, false otherwise.</returns>
        </member>
        <member name="F:Microsoft.SemanticKernel.Process.Internal.ProcessConstants.GlobalErrorEventId">
            <summary>
            Event raised internally for errors not handled at the step level.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Process.Internal.ProcessConstants.EndStepName">
            <summary>
            Qualified name of the end step.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Process.Internal.ProcessConstants.EventIdSeparator">
            <summary>
            Separator for qualified event ids.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Process.Internal.ProcessConstants.InternalStepsVersion">
            <summary>
            Version for state of internal steps
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Process.Internal.ProcessConstants.MapEventId">
            <summary>
            EventId used internally as the input event for <see cref="P:Microsoft.SemanticKernel.KernelProcessMap.Operation"/>.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Process.Internal.ProcessConstants.SupportedComponents">
            <summary>
            Enum containing the name of internal components.
            Used for serialization purposes.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Process.Internal.StepExtensions.FindInputChannels(Microsoft.SemanticKernel.IKernelProcessMessageChannel,System.Collections.Generic.Dictionary{System.String,Microsoft.SemanticKernel.KernelFunction},Microsoft.Extensions.Logging.ILogger,Microsoft.SemanticKernel.IExternalKernelProcessMessageChannel,Microsoft.SemanticKernel.Agents.AgentDefinition)">
            <summary>
            Examines the KernelFunction for the step and creates a dictionary of input channels.
            Some types such as KernelProcessStepContext are special and need to be injected into
            the function parameter. Those objects are instantiated at this point.
            </summary>
            <param name="channel">The source channel to evaluate</param>
            <param name="functions">A dictionary of KernelFunction instances.</param>
            <param name="logger">An instance of <see cref="T:Microsoft.Extensions.Logging.ILogger"/>.</param>
            <param name="externalMessageChannel">An instance of <see cref="T:Microsoft.SemanticKernel.IExternalKernelProcessMessageChannel"/></param>
            <param name="agentDefinition">An instance of <see cref="T:Microsoft.SemanticKernel.Agents.AgentDefinition"/></param>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Microsoft.SemanticKernel.Process.KernelProcessContext">
            <summary>
            Represents the context of a running process.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Process.KernelProcessContext.SendEventAsync(Microsoft.SemanticKernel.KernelProcessEvent)">
            <summary>
            Sends a message to the process.
            </summary>
            <param name="processEvent">The event to sent to the process.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Process.KernelProcessContext.StopAsync">
            <summary>
            Stops the process.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Process.KernelProcessContext.GetStateAsync">
            <summary>
            Gets a snapshot of the current state of the process.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> where T is <see cref="T:Microsoft.SemanticKernel.KernelProcess"/></returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Process.KernelProcessContext.GetExternalMessageChannelAsync">
            <summary>
            Gets the instance of <see cref="T:Microsoft.SemanticKernel.IExternalKernelProcessMessageChannel"/> used for external messages
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Process.KernelProcessContext.GetProcessIdAsync">
            <summary>
            Gets the id of the running process instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Process.KernelProcessStepMetadataAttribute">
            <summary>
            Attribute to set Process Step State Metadata related properties
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Process.KernelProcessStepMetadataAttribute.#ctor">
            <summary>
            Attribute that assigns default values to Process Step Metadata
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Process.KernelProcessStepMetadataAttribute.#ctor(System.String)">
            <summary>
            Attribute that assigns default version to Process Step Metadata
            </summary>
            <param name="version"></param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Process.KernelProcessStepMetadataAttribute.Version">
            <summary>
            Version of the step to be used to save with the step state
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Process.KernelProxyStep">
            <summary>
            Internal SK KernelProcessStep preconfigured to be used when emitting SK events outside of the SK Process Framework or inside with a different event name
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Process.KernelProxyStep.ProcessFunctions">
            <summary>
            SK Function names in this SK Step as entry points
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Process.KernelProxyStep.ProcessFunctions.EmitExternalEvent">
            <summary>
            Function name used to emit events externally
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Process.KernelProxyStep.DeactivateAsync(Microsoft.SemanticKernel.KernelProcessStepExternalContext)">
            <summary>
            On deactivation, external communication channel must be closed
            </summary>
            <param name="context">instance of <see cref="T:Microsoft.SemanticKernel.KernelProcessStepContext"/></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Process.KernelProxyStep.EmitExternalEventAsync(Microsoft.SemanticKernel.KernelProcessStepExternalContext,Microsoft.SemanticKernel.KernelProcessProxyMessage)">
            <summary>
            Step function used to emit events externally
            </summary>
            <param name="context">instance of <see cref="T:Microsoft.SemanticKernel.KernelProcessStepContext"/></param>
            <param name="proxyEvent">event data passed to proxy step</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Process.Models.KernelProcessMapStateMetadata">
            <summary>
            Process state used for State Persistence serialization
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Process.Models.KernelProcessMapStateMetadata.OperationState">
            <summary>
            Process State of Steps if provided
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Process.Models.KernelProcessProxyEventMetadata">
            <summary>
            Process state used for State Persistence serialization
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Process.Models.KernelProcessProxyEventMetadata.TopicName">
            <summary>
            Name of the topic to be emitted externally
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Process.Models.KernelProcessProxyEventMetadata.EventId">
            <summary>
            Internal id used to identify the SK event
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Process.Models.KernelProcessProxyStateMetadata">
            <summary>
            Process state used for State Persistence serialization
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Process.Models.KernelProcessProxyStateMetadata.PublishTopics">
            <summary>
            List of publish topics that can be used by the SK process
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Process.Models.KernelProcessProxyStateMetadata.EventMetadata">
            <summary>
            Map that stores which process events trigger external topic to be published and internal metadata information
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Process.Models.KernelProcessStateMetadata">
            <summary>
            Process state used for State Persistence serialization
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Process.Models.KernelProcessStateMetadata.StepsState">
            <summary>
            Process State of Steps if provided
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Process.Models.KernelProcessStepStateMetadata">
            <summary>
            Step state used for State Persistence serialization
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Process.Models.KernelProcessStepStateMetadata.Id">
            <summary>
            The identifier of the Step which is required to be unique within an instance of a Process.
            This may be null until a process containing this step has been invoked.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Process.Models.KernelProcessStepStateMetadata.Name">
            <summary>
            The name of the Step. This is intended to be human readable and is not required to be unique. If
            not provided, the name will be derived from the steps .NET type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Process.Models.KernelProcessStepStateMetadata.VersionInfo">
            <summary>
            Version of the state that is stored. Used for validation and versioning
            purposes when reading a state and applying it to a ProcessStepBuilder/ProcessBuilder
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Process.Models.KernelProcessStepStateMetadata.State">
            <summary>
            The user-defined state object associated with the Step (if the step is stateful)
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcess">
            <summary>
            A serializable representation of a Process.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcess.Steps">
            <summary>
            The collection of Steps in the Process.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcess.Threads">
            <summary>
            The collection of Threads in the Process.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcess.UserStateType">
            <summary>
            The type of the user state. This is used to identify the underlying state type.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcess.ToProcessStateMetadata">
            <summary>
            Captures Kernel Process State into <see cref="T:Microsoft.SemanticKernel.Process.Models.KernelProcessStateMetadata"/> after process has run
            </summary>
            <returns><see cref="T:Microsoft.SemanticKernel.Process.Models.KernelProcessStateMetadata"/></returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcess.#ctor(Microsoft.SemanticKernel.KernelProcessState,System.Collections.Generic.IList{Microsoft.SemanticKernel.KernelProcessStepInfo},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Microsoft.SemanticKernel.KernelProcessEdge}},System.Collections.Generic.IReadOnlyDictionary{System.String,Microsoft.SemanticKernel.KernelProcessAgentThread})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelProcess"/> class.
            </summary>
            <param name="state">The process state.</param>
            <param name="steps">The steps of the process.</param>
            <param name="edges">The edges of the process.</param>
            <param name="threads">The threads associated with the process.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessAgentExecutor">
            <summary>
            Represents a step in a process that executes an agent.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessAgentExecutor.ProcessFunctions">
            <summary>
            SK Function names in this SK Step as entry points
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelProcessAgentExecutor.ProcessFunctions.Invoke">
            <summary>
            Function name used to emit events externally
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessAgentExecutor.Invoke">
            <summary>
            Invokes the agent with the provided definition.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessStateResolver`1">
            <summary>
            Delegate that represents a condition that must be met for a <see cref="T:Microsoft.SemanticKernel.KernelProcessEdge"/> to be activated.
            </summary>
            <param name="processState">The readonly process state.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessAgentStep">
            <summary>
            Represents a step in a process that is an agent.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessAgentStep.#ctor(Microsoft.SemanticKernel.Agents.AgentDefinition,Microsoft.SemanticKernel.ProcessAgentActions,Microsoft.SemanticKernel.KernelProcessStepState,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Microsoft.SemanticKernel.KernelProcessEdge}},System.String,System.Collections.Generic.Dictionary{System.String,System.Type},System.Collections.Generic.Dictionary{System.String,Microsoft.SemanticKernel.KernelProcessEdgeGroup})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelProcessAgentStep"/> class.
            </summary>
            <param name="agentDefinition"></param>
            <param name="agentActions"></param>
            <param name="state"></param>
            <param name="edges"></param>
            <param name="threadName"></param>
            <param name="inputs"></param>
            <param name="incomingEdgeGroups"></param>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessAgentStep.AgentIdResolver">
            <summary>
            The optional resolver for the agent ID. This is used to determine the ID of the agent at runtime.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessAgentStep.ThreadName">
            <summary>
            The name of the thread this agent is associated with. Will be null if not associated with a specific thread instance.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessAgentStep.AgentDefinition">
            <summary>
            The agent definition associated with this step.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessAgentStep.Inputs">
            <summary>
            The inputs for this agent.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessAgentStep.Actions">
            <summary>
            The handler group for code-based actions.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessAgentStep.HumanInLoopMode">
            <summary>
            The human-in-the-loop mode for this agent. This determines whether the agent will wait for human input before proceeding.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessAgentThread">
            <summary>
            Represents a thread in the process.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessAgentThread.ThreadPolicy">
            <summary>
            The policy describing how the thread is created and managed in the process.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessAgentThread.ThreadType">
            <summary>
            The type of the thread. This is used to identify the underlying thread type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessAgentThread.ThreadId">
            <summary>
            The id of the thread. This may be null if the thread is not existing when the Process is created.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessAgentThread.ThreadName">
            <summary>
            The name of the thread. This is used to identify the thread in the process.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessDeclarativeConditionHandler">
            <summary>
            Represents a declarative event handler for a process.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessDeclarativeConditionHandler.AlwaysCondition">
            <summary>
            An optional handler that will always be executed.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessDeclarativeConditionHandler.DefaultCondition">
            <summary>
            An optional handler that will be executed if no other condition is met.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessDeclarativeConditionHandler.EvalConditions">
            <summary>
            The list of eval-based handlers.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessEdge">
            <summary>
            A serializable representation of an edge between a source <see cref="T:Microsoft.SemanticKernel.KernelProcessStep"/> and a <see cref="T:Microsoft.SemanticKernel.KernelProcessFunctionTarget"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessEdge.SourceStepId">
            <summary>
            The unique identifier of the source Step.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessEdge.OutputTarget">
            <summary>
            The collection of <see cref="T:Microsoft.SemanticKernel.KernelProcessFunctionTarget"/>s that are the output of the source Step.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessEdge.GroupId">
            <summary>
            The unique identifier for the group of edges. This may be null if the edge is not part of a group.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessEdge.Condition">
            <summary>
            The condition that must be met for the edge to be activated.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessEdge.Update">
            <summary>
            The list of variable updates to be performed when the edge fires.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessEdge.#ctor(System.String,Microsoft.SemanticKernel.KernelProcessTarget,System.String,Microsoft.SemanticKernel.KernelProcessEdgeCondition,Microsoft.SemanticKernel.VariableUpdate)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelProcessEdge"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessEdgeConditionCallback">
            <summary>
            Delegate that represents a condition that must be met for a <see cref="T:Microsoft.SemanticKernel.KernelProcessEdge"/> to be activated.
            </summary>
            <param name="processEvent">The event associated with the edge.</param>
            <param name="processState">The readonly process state.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessEdgeCondition">
            <summary>
            A class representing a condition that must be met for a <see cref="T:Microsoft.SemanticKernel.KernelProcessEdge"/> to be activated.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessEdgeCondition.#ctor(Microsoft.SemanticKernel.KernelProcessEdgeConditionCallback,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelProcessEdgeCondition"/> class with the specified callback and optional declarative definition.
            </summary>
            <param name="callback"></param>
            <param name="declarativeDefinition"></param>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessEdgeCondition.Callback">
            <summary>
            The condition that must be met for the edge to be activated.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessEdgeCondition.DeclarativeDefinition">
            <summary>
            The declarative definition of the condition, if any.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessEdgeGroup">
            <summary>
            Represents a group of edges in a kernel process.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessEdgeGroup.#ctor(System.String,System.Collections.Generic.List{Microsoft.SemanticKernel.KernelProcessMessageSource},System.Func{System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelProcessEdgeGroup"/> class.
            </summary>
            <param name="groupId">The unique Id of the edge group.</param>
            <param name="messageSources">The message sources.</param>
            <param name="inputMapping">The input mapping.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessEdgeGroup.GroupId">
            <summary>
            Gets the unique identifier for this edge group.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessEdgeGroup.MessageSources">
            <summary>
            Gets the list of message sources that this edge group is listening to.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessEdgeGroup.InputMapping">
            <summary>
            Gets the input mapping function for this edge group.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessError">
            <summary>
            Represents an failure that occurred during the execution of a process.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelProcessError"/> class.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessError.Type">
             <summary>
            The exception type name.
             </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessError.Message">
            <summary>
            The exception message (<see cref="P:System.Exception.Message"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessError.StackTrace">
            <summary>
            The exception stack-trace (<see cref="P:System.Exception.StackTrace"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessError.InnerError">
            <summary>
            The inner failure, when exists, as <see cref="T:Microsoft.SemanticKernel.KernelProcessError"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessError.FromException(System.Exception)">
            <summary>
            Factory method to create a <see cref="T:Microsoft.SemanticKernel.KernelProcessError"/> from a source <see cref="T:System.Exception"/> object.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessEvent">
            <summary>
            A class representing an event that can be emitted from a <see cref="T:Microsoft.SemanticKernel.KernelProcessStep"/>. This type is convertible to and from CloudEvents.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessEvent.Id">
            <summary>
            The unique identifier for the event.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessEvent.Data">
            <summary>
            An optional data payload associated with the event.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessEvent.Visibility">
            <summary>
            The visibility of the event. Defaults to <see cref="F:Microsoft.SemanticKernel.KernelProcessEventVisibility.Internal"/>.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessEvent`1">
            <summary>
            A strongly typed version of <see cref="T:Microsoft.SemanticKernel.KernelProcessEvent"/> that allows for a specific type of data payload.
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessEvent`1.Data">
            <summary>
            The data payload associated with the event, strongly typed.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessEvent`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelProcessEvent`1"/> class with default values.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessEvent`1.#ctor(System.String,`0,Microsoft.SemanticKernel.KernelProcessEventVisibility)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelProcessEvent`1"/> class with the specified id, data, and visibility.
            </summary>
            <param name="id"></param>
            <param name="data"></param>
            <param name="visibility"></param>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessEventData">
            <summary>
            A serializable representation of an internal message used in a process runtime received by proxy steps.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelProcessEventData"/> class.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessEventData.ObjectType">
            <summary>
            The assembly qualified name of the object type
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessEventData.Content">
            <summary>
            The Json serialized object
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessEventData.ToObject">
            <summary>
            Converts serialized object to original object type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessEventData.FromObject(System.Object)">
            <summary>
            Converts from original object to serialized version of the object
            </summary>
            <param name="obj">object to be serialized</param>
            <returns>instance of <see cref="T:Microsoft.SemanticKernel.KernelProcessEventData"/></returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessEventVisibility">
            <summary>
            An enumeration representing the visibility of a <see cref="T:Microsoft.SemanticKernel.KernelProcessEvent"/>. This is used to determine
            if the event is kept within the process it's emitted in, or exposed to external processes and systems.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelProcessEventVisibility.Internal">
            <summary>
            The event is only visible to steps within the same process.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelProcessEventVisibility.Public">
            <summary>
            The event is visible inside the process as well as outside the process. This is useful
            when the event is intended to be consumed by other processes or external systems.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessTarget">
            <summary>
            Represents the target for an edge in a Process
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessTarget.#ctor(Microsoft.SemanticKernel.ProcessTargetType)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.SemanticKernel.KernelProcessTarget"/> class.
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessTarget.Type">
            <summary>
            The type of target.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessStateTarget">
            <summary>
            Represents a state operations target for an edge in a Process
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessStateTarget.#ctor(Microsoft.SemanticKernel.VariableUpdate)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.SemanticKernel.KernelProcessStateTarget"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessStateTarget.VariableUpdate">
            <summary>
            The associated <see cref="P:Microsoft.SemanticKernel.KernelProcessStateTarget.VariableUpdate"/>.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessEmitTarget">
            <summary>
            Represents a state operations target for an edge in a Process
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessEmitTarget.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelProcessEmitTarget"/> class.
            </summary>
            <param name="eventName"></param>
            <param name="payload"></param>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessEmitTarget.EventName">
            <summary>
            The name or type of the event to be emitted.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessEmitTarget.Payload">
            <summary>
            /// The payload to be sent with the event.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessAgentInvokeTarget">
            <summary>
            Represents an agent invocation target for an edge in a Process
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessAgentInvokeTarget.#ctor(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.SemanticKernel.KernelProcessAgentInvokeTarget"/> class.
            </summary>
            <param name="stepId"></param>
            <param name="threadEval"></param>
            <param name="messagesInEval"></param>
            <param name="inputEvals"></param>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessAgentInvokeTarget.StepId">
            <summary>
            The unique identifier of the Step being targeted.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessAgentInvokeTarget.ThreadEval">
            <summary>
            An evaluation string that will be evaluated to determine the thread to run on.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessAgentInvokeTarget.MessagesInEval">
            <summary>
            An evaluation string that will be evaluated to determine the messages to send to the target.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessAgentInvokeTarget.InputEvals">
            <summary>
            An evaluation string that will be evaluated to determine the inputs to send to the target.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessFunctionTarget">
            <summary>
            A serializable representation of a specific parameter of a specific function of a specific Step.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessFunctionTarget.#ctor(System.String,System.String,System.String,System.String,System.Func{System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.SemanticKernel.KernelProcessFunctionTarget"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessFunctionTarget.StepId">
            <summary>
            The unique identifier of the Step being targeted.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessFunctionTarget.FunctionName">
            <summary>
            The name if the Kernel Function to target.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessFunctionTarget.ParameterName">
            <summary>
            The name of the parameter to target. This may be null if the function has no parameters.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessFunctionTarget.TargetEventId">
            <summary>
            The unique identifier for the event to target. This may be null if the target is not a sub-process.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessFunctionTarget.InputMapping">
            <summary>
            The mapping function to apply to the input data before passing it to the function.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessMap">
            <summary>
            A serializable representation of a ProcessMap.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessMap.Operation">
            <summary>
            The map operation.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessMap.#ctor(Microsoft.SemanticKernel.KernelProcessMapState,Microsoft.SemanticKernel.KernelProcessStepInfo,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Microsoft.SemanticKernel.KernelProcessEdge}})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelProcess"/> class.
            </summary>
            <param name="state">The process state.</param>
            <param name="operation">The map operation.</param>
            <param name="edges">The edges for the map.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessMapState">
            <summary>
            Represents the state of a <see cref="T:Microsoft.SemanticKernel.KernelProcessMap"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessMapState.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelProcessMapState"/> class.
            </summary>
            <param name="name">The name of the associated <see cref="T:Microsoft.SemanticKernel.KernelProcessMap"/></param>
            <param name="version">version id of the process step state</param>
            <param name="id">The Id of the associated <see cref="T:Microsoft.SemanticKernel.KernelProcessMap"/></param>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessMessageSource">
            <summary>
            Represents a message type and source in the context of a kernel process.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessMessageSource.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelProcessMessageSource"/> class.
            </summary>
            <param name="messageType">The message type</param>
            <param name="sourceStepId">The unique Id of the source step.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessMessageSource.MessageType">
            <summary>
            The type of message.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessMessageSource.SourceStepId">
            <summary>
            The unique identifier of the step that generated this message.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessProxy">
            <summary>
            A serializable representation of a ProcessProxy.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessProxy.ProxyMetadata">
            <summary>
            Proxy metadata used for linking specific SK events to external events and viceversa
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessProxy.#ctor(Microsoft.SemanticKernel.KernelProcessStepState,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Microsoft.SemanticKernel.KernelProcessEdge}})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelProcess"/> class.
            </summary>
            <param name="state">The process state.</param>
            <param name="edges">The edges for the map.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessProxyMessage">
            <summary>
            A serializable representation of an internal message used in a process runtime received by proxy steps.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelProcessProxyMessage"/> class.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessProxyMessage.ProcessId">
            <summary>
            Id of the SK process that emits the external event
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessProxyMessage.TriggerEventId">
            <summary>
            Name of the SK process that triggers sending the event externally
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessProxyMessage.ExternalTopicName">
            <summary>
            Topic name used for publishing process event data externally
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessProxyMessage.ProxyEventName">
            <summary>
            Event name used for publishing process event as another process event with a different event name
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessProxyMessage.EventData">
            <summary>
            Data to be emitted
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessState">
            <summary>
            Represents the state of a <see cref="T:Microsoft.SemanticKernel.KernelProcess"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessState.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelProcessState"/> class.
            </summary>
            <param name="name">The name of the associated <see cref="T:Microsoft.SemanticKernel.KernelProcessStep"/></param>
            <param name="version">version id of the process step state</param>
            <param name="id">The Id of the associated <see cref="T:Microsoft.SemanticKernel.KernelProcessStep"/></param>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessStep">
            <summary>
            Process Step. Derive from this class to create a new Step for a Process.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessStep.ActivateAsync(Microsoft.SemanticKernel.KernelProcessStepState)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessStep`1">
            <summary>
            Process Step. Derive from this class to create a new Step with user-defined state of type TState for a Process.
            </summary>
            <typeparam name="TState">An instance of TState used for user-defined state.</typeparam>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessStep`1.ActivateAsync(Microsoft.SemanticKernel.KernelProcessStepState{`0})">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessStepContext">
            <summary>
            Provides step related functionality for Kernel Functions running in a step.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessStepContext.#ctor(Microsoft.SemanticKernel.IKernelProcessMessageChannel)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelProcessStepContext"/> class.
            </summary>
            <param name="channel">An instance of <see cref="T:Microsoft.SemanticKernel.IKernelProcessMessageChannel"/>.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessStepContext.EmitEventAsync(Microsoft.SemanticKernel.KernelProcessEvent)">
            <summary>
            Emit an SK process event from the current step.
            </summary>
            <param name="processEvent">An instance of <see cref="T:Microsoft.SemanticKernel.KernelProcessEvent"/> to be emitted from the <see cref="T:Microsoft.SemanticKernel.KernelProcessStep"/></param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/></returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessStepContext.EmitEventAsync(System.String,System.Object,Microsoft.SemanticKernel.KernelProcessEventVisibility)">
            <summary>
            Emit an SK process event from the current step with a simplified method signature.
            </summary>
            <param name="eventId"></param>
            <param name="data"></param>
            <param name="visibility"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessStepExternalContext">
            <summary>
            Provides step related functionality for Kernel Functions running in a step to emit events externally.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessStepExternalContext.#ctor(Microsoft.SemanticKernel.IExternalKernelProcessMessageChannel)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelProcessStepContext"/> class.
            </summary>
            <param name="externalMessageChannel">An instance of <see cref="T:Microsoft.SemanticKernel.IExternalKernelProcessMessageChannel"/></param>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessStepExternalContext.EmitExternalEventAsync(Microsoft.SemanticKernel.KernelProcessProxyMessage)">
            <summary>
            Emit an external event to through a <see cref="T:Microsoft.SemanticKernel.IExternalKernelProcessMessageChannel"/>
            component if connected from within the SK process
            </summary>
            <param name="processEventData">data containing event details</param>
            <returns></returns>
            <exception cref="T:Microsoft.SemanticKernel.KernelException"></exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessStepExternalContext.CloseExternalEventChannelAsync">
            <summary>
            Closes connection with external messaging channel
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
            <exception cref="T:Microsoft.SemanticKernel.KernelException"></exception>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessStepInfo">
            <summary>
            Contains information about a Step in a Process including it's state and edges.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessStepInfo.InnerStepType">
            <summary>
            The type of the inner step.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessStepInfo.State">
            <summary>
            The state of the Step.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessStepInfo.Description">
            <summary>
            The semantic description of the Step. This is intended to be human and AI readable and is not required to be unique.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessStepInfo.Edges">
            <summary>
            A read-only dictionary of output edges from the Step.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessStepInfo.IncomingEdgeGroups">
            <summary>
            A dictionary of input mappings for the grouped edges.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessStepInfo.#ctor(System.Type,Microsoft.SemanticKernel.KernelProcessStepState,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Microsoft.SemanticKernel.KernelProcessEdge}},System.Collections.Generic.Dictionary{System.String,Microsoft.SemanticKernel.KernelProcessEdgeGroup})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelProcessStepInfo"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessStepState">
            <summary>
            Represents the state of an individual step in a process.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelProcessStepState.s_knownTypes">
            <summary>
            A set of known types that may be used in serialization.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessStepState.GetKnownTypes">
            <summary>
            Used to dynamically provide the set of known types for serialization.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessStepState.RegisterDerivedType(System.Type)">
            <summary>
            Registers a derived type for serialization. Types registered here are used by the KnownType attribute
            to support DataContractSerialization of derived types as required to support Dapr.
            </summary>
            <param name="derivedType">A Type that derives from <typeref name="KernelProcessStepState"/></param>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessStepState.Id">
            <summary>
            The identifier of the Step which is required to be unique within an instance of a Process.
            This may be null until a process containing this step has been invoked.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessStepState.Name">
            <summary>
            The name of the Step. This is intended to be human readable and is not required to be unique. If
            not provided, the name will be derived from the steps .NET type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessStepState.Version">
            <summary>
            Version of the state
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessStepState.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelProcessStepState"/> class.
            </summary>
            <param name="name">The name of the associated <see cref="T:Microsoft.SemanticKernel.KernelProcessStep"/></param>
            <param name="version">version id of the process step state</param>
            <param name="id">The Id of the associated <see cref="T:Microsoft.SemanticKernel.KernelProcessStep"/></param>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessStepState`1">
            <summary>
            Represents the state of an individual step in a process that includes a user-defined state object.
            </summary>
            <typeparam name="TState">The type of the user-defined state.</typeparam>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelProcessStepState`1.State">
            <summary>
            The user-defined state object associated with the Step.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelProcessStepState`1.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelProcessStepState"/> class.
            </summary>
            <param name="name">The name of the associated <see cref="T:Microsoft.SemanticKernel.KernelProcessStep"/></param>
            <param name="version">version id of the process step state</param>
            <param name="id">The Id of the associated <see cref="T:Microsoft.SemanticKernel.KernelProcessStep"/></param>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessThreadLifetime">
            <summary>
            Defines the policy for how threads are managed in the process.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelProcessThreadLifetime.Scoped">
            <summary>
            The thread is created when the process is created. The thread id is saved in the process state and will be reused within the scope of a process instance. Scoped threads can be shared between steps.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelProcessThreadLifetime.Transient">
            <summary>
            A new thread is created every time a step in the process uses it. The thread id is not saved in the process state. Transient threads cannot be shared between steps.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelProcessThreadType">
            <summary>
            Represents the type of a thread in a kernel process.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelProcessThreadType.ChatCompletion">
            <summary>
            A thread is a general chat completion type.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelProcessThreadType.AzureAI">
            <summary>
            A thread is an AzureAI or Foundry type.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.ProcessAgentActions">
            <summary>
            Represents the actions that can be performed by a process agent.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ProcessAgentActions.#ctor(Microsoft.SemanticKernel.ProcessAgentCodeActions,Microsoft.SemanticKernel.ProcessAgentDeclarativeActions)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.ProcessAgentActions"/> class.
            </summary>
            <param name="codeActions">The code based actions. These are not serializable to a declarative format.</param>
            <param name="declarativeActions">The declarative action. These are required when building an exportable process.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:Microsoft.SemanticKernel.ProcessAgentActions.CodeActions">
            <summary>
            The optional handler group for code-based actions.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ProcessAgentActions.DeclarativeActions">
            <summary>
            The optional handler group for declarative actions.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.ProcessAgentCodeActions">
            <summary>
            Represents the code-based actions that can be performed by a process agent.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ProcessAgentCodeActions.OnComplete">
            <summary>
            The optional handler group for OnComplete events.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ProcessAgentCodeActions.OnError">
            <summary>
            The optional handler group for OnError events.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.ProcessAgentDeclarativeActions">
            <summary>
            Represents the declarative actions that can be performed by a process agent.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ProcessAgentDeclarativeActions.OnComplete">
            <summary>
            The optional handler group for OnComplete events.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ProcessAgentDeclarativeActions.OnError">
            <summary>
            The optional handler group for OnError events.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.ProcessTargetType">
            <summary>
            Represents the type of target for a process.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.ProcessTargetType.Invocation">
            <summary>
            The target is a step.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.ProcessTargetType.KernelFunction">
            <summary>
            The target is a function.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.ProcessTargetType.StateUpdate">
            <summary>
            The target is a parameter.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.WorkflowWrapper">
            <summary>
            A wrapper class that encapsulates the workflow definition for serialization and deserialization.
            This class serves as the root container for workflow configurations in both YAML and JSON formats.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.WorkflowWrapper.Workflow">
            <summary>
            Gets or sets the workflow definition contained within this wrapper.
            This property represents the complete workflow specification including all nodes, orchestration, and error handling.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Workflow">
            <summary>
            Represents the main workflow specification that defines the complete structure and behavior of a workflow.
            A workflow consists of nodes, orchestration steps, variables, schemas, and error handling configurations.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Workflow.Id">
            <summary>
            Gets or sets the unique identifier of the workflow.
            This ID should be unique across all workflows within the system and is used for workflow identification and referencing.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Workflow.FormatVersion">
            <summary>
            Gets or sets the format version of the workflow specification.
            This version indicates the schema version used to define the workflow and ensures compatibility with the execution engine.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Workflow.WorkflowVersion">
            <summary>
            Gets or sets the version of the workflow implementation.
            This version tracks the evolution of the workflow definition and allows for versioning of workflow logic.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Workflow.Name">
            <summary>
            Gets or sets the human-readable name of the workflow.
            This name is used for display purposes and should clearly identify the workflow's purpose.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Workflow.Description">
            <summary>
            Gets or sets the optional description of the workflow.
            This description provides additional context about the workflow's purpose, behavior, and usage.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Workflow.SuggestedInputs">
            <summary>
            Gets or sets the suggested inputs for the workflow.
            These inputs provide examples or recommendations for how the workflow should be invoked.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Workflow.Inputs">
            <summary>
            Gets or sets the input configuration for the workflow.
            This defines what types of inputs the workflow accepts, including events and messages.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Workflow.Variables">
            <summary>
            Gets or sets the variables defined within the workflow scope.
            These variables can be used throughout the workflow for state management and data passing between nodes.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Workflow.Schemas">
            <summary>
            Gets or sets the schemas used within the workflow.
            These schemas define the structure and validation rules for data used throughout the workflow.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Workflow.Nodes">
            <summary>
            Gets or sets the collection of nodes that make up the workflow.
            Each node represents a step or component in the workflow execution graph.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Workflow.Orchestration">
            <summary>
            Gets or sets the orchestration steps that define the workflow execution flow.
            These steps specify the conditions and actions that control how the workflow progresses from node to node.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Workflow.ErrorHandling">
            <summary>
            Gets or sets the error handling configuration for the workflow.
            This defines how the workflow should respond to and recover from errors during execution.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.VariableType">
            <summary>
            Defines the possible types of variables that can be used within a workflow.
            Variables can represent different data structures and have different behaviors during workflow execution.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.VariableType.Thread">
            <summary>
            A thread type variable that represents a conversation thread or execution context.
            Thread variables maintain state and context across multiple interactions within the workflow.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.VariableType.Messages">
            <summary>
            A message type variable that represents a collection of messages.
            Messages variables are used to store and pass communication data between workflow components.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.VariableType.UserDefined">
            <summary>
            A user-defined variable with custom structure and behavior.
            User-defined variables allow for flexible data types specific to the workflow's requirements.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.VariableDefinition">
            <summary>
            Represents the definition of a variable within a workflow, including its type, default value, and schema.
            Variable definitions specify how variables should be initialized and validated during workflow execution.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.VariableDefinition.Type">
            <summary>
            Gets or sets the type of the variable.
            The type determines how the variable is handled and what operations can be performed on it.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.VariableDefinition.DefaultValue">
            <summary>
            Gets or sets the default value of the variable.
            This value is used to initialize the variable when the workflow starts if no other value is provided.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.VariableDefinition.Schema">
            <summary>
            Gets or sets the schema definition for the variable.
            The schema defines the structure, validation rules, and constraints for the variable's value.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.SuggestedInputs">
            <summary>
            Contains suggested input configurations that provide guidance on how to invoke the workflow.
            Suggested inputs help users understand the expected input format and provide examples for workflow execution.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SuggestedInputs.Events">
            <summary>
            Gets or sets the list of suggested events that can be used to trigger the workflow.
            These events serve as examples or templates for valid workflow inputs.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.SuggestedEvent">
            <summary>
            Represents a suggested event that demonstrates how to trigger the workflow with specific input data.
            Suggested events provide examples of valid event types and their associated payloads.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SuggestedEvent.Type">
            <summary>
            Gets or sets the type identifier of the suggested event.
            This type should match one of the event types that the workflow is configured to handle.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SuggestedEvent.Payload">
            <summary>
            Gets or sets the payload data for the suggested event.
            The payload contains the data structure and values that would be passed with this type of event.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Inputs">
            <summary>
            Defines the input configuration for a workflow, specifying what types of data the workflow can accept.
            Inputs can include both events and message collections, allowing for flexible workflow triggering mechanisms.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Inputs.Events">
            <summary>
            Gets or sets the event input configuration for the workflow.
            This defines which types of events can trigger the workflow and how they should be processed.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Inputs.Messages">
            <summary>
            Gets or sets the message input configuration for the workflow.
            This allows the workflow to be triggered with a collection of messages rather than events.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.InputEvents">
            <summary>
            Contains the event input configuration for a workflow, defining which events can trigger execution.
            Event inputs allow workflows to be triggered by various types of external or internal events.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.InputEvents.CloudEvents">
            <summary>
            Gets or sets the list of cloud events that can trigger the workflow.
            Cloud events follow the CloudEvents specification and provide a standardized way to describe events.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Messages">
            <summary>
            Represents a collection of messages that can be used as input to a workflow.
            This class extends List to provide a strongly-typed collection for message objects.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.CloudEvent">
            <summary>
            Represents a CloudEvent that can trigger workflow execution.
            CloudEvents provide a standardized format for describing events in a vendor-neutral way.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.CloudEvent.Type">
            <summary>
            Gets or sets the type of the cloud event.
            The event type identifies the nature of the event and determines how it should be processed.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.CloudEvent.DataSchema">
            <summary>
            Gets or sets the data schema for the cloud event's payload.
            The data schema defines the structure and validation rules for the event's data content.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.CloudEvent.Filters">
            <summary>
            Gets or sets the list of filters that determine whether this event should trigger the workflow.
            Filters allow for conditional processing based on event content or metadata.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.ProcessFilter">
            <summary>
            Represents a filter condition that can be applied to events or other workflow data.
            Filters are used to conditionally process or route data based on specified criteria.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ProcessFilter.FilterExpression">
            <summary>
            Gets or sets the filter expression that defines the condition.
            The expression is evaluated against the event or data to determine if the filter matches.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Variable">
            <summary>
            Represents a variable within the workflow context, including its type, default value, and access controls.
            Variables provide state management and data sharing capabilities within the workflow execution environment.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Variable.Type">
            <summary>
            Gets or sets the type identifier of the variable.
            The type determines how the variable is stored, accessed, and manipulated during execution.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Variable.Default">
            <summary>
            Gets or sets the default value assigned to the variable when it is first created.
            This value is used if no explicit initialization value is provided.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Variable.Scope">
            <summary>
            Gets or sets the scope in which the variable is accessible.
            Scope determines which parts of the workflow can read and modify the variable.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Variable.IsMutable">
            <summary>
            Gets or sets a value indicating whether the variable can be modified after initialization.
            Immutable variables provide read-only access after their initial assignment.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Variable.Acls">
            <summary>
            Gets or sets the access control list (ACL) that defines which nodes can access this variable.
            ACLs provide fine-grained security control over variable access within the workflow.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.WorkflowAccessControl">
            <summary>
            Defines an access control entry that specifies permissions for a workflow node to access a variable.
            Access control entries provide security and isolation by restricting variable access to authorized nodes.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.WorkflowAccessControl.Node">
            <summary>
            Gets or sets the identifier of the node that is granted access.
            This should match the ID of a node defined in the workflow's node collection.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.WorkflowAccessControl.Access">
            <summary>
            Gets or sets the level of access granted to the node.
            Access levels typically include read, write, or read-write permissions.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.WorkflowSchema">
            <summary>
            Represents a schema definition used to validate and structure data within the workflow.
            Schemas ensure data integrity and provide a contract for data exchange between workflow components.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.WorkflowSchema.Type">
            <summary>
            Gets or sets the type of the schema (e.g., object, array, string).
            The type defines the fundamental structure that the schema validates.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.WorkflowSchema.Properties">
            <summary>
            Gets or sets the properties defined within the schema.
            Properties specify the individual fields and their validation rules for object-type schemas.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.WorkflowSchema.Required">
            <summary>
            Gets or sets the list of required property names within the schema.
            Required properties must be present in any data that conforms to this schema.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.SchemaProperty">
            <summary>
            Represents a property definition within a schema, including its type, constraints, and references.
            Schema properties define the validation rules and structure for individual fields within a schema.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SchemaProperty.Type">
            <summary>
            Gets or sets the data type of the schema property.
            The type determines what kind of values are valid for this property.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SchemaProperty.Items">
            <summary>
            Gets or sets the item definition for array-type properties.
            This defines the structure and validation rules for elements within an array property.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SchemaProperty.Ref">
            <summary>
            Gets or sets a reference to another schema definition.
            References allow for reuse of schema definitions and creation of complex nested structures.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.SchemaItems">
            <summary>
            Defines the schema for items within an array-type schema property.
            Schema items specify how individual elements in an array should be validated and structured.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SchemaItems.Type">
            <summary>
            Gets or sets the data type of the array items.
            This type applies to each individual element within the array.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Node">
            <summary>
            Represents a single node within the workflow execution graph.
            Nodes are the fundamental building blocks of a workflow, each performing a specific task or operation.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Node.Id">
            <summary>
            Gets or sets the unique identifier of the node within the workflow.
            This ID is used to reference the node in orchestration steps and other workflow configurations.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Node.Type">
            <summary>
            Gets or sets the type of the node, which determines its behavior and capabilities.
            Node types define the category of operation that the node performs within the workflow.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Node.Version">
            <summary>
            Gets or sets the version of the node implementation.
            Versioning allows for evolution of node behavior while maintaining backward compatibility.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Node.Description">
            <summary>
            Gets or sets the optional description of the node's purpose and behavior.
            Descriptions provide documentation and context for understanding the node's role in the workflow.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Node.Agent">
            <summary>
            Gets or sets the agent definition associated with this node.
            Agents provide the actual implementation and execution logic for the node.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Node.HumanInLoopType">
            <summary>
            Gets or sets the human-in-the-loop (HITL) mode for this node.
            HITL mode determines when and how human intervention is required during node execution.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Node.Inputs">
            <summary>
            Gets or sets the input configuration for the node.
            Inputs define what data the node expects to receive when it is executed.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Node.AgentInputMapping">
            <summary>
            Gets or sets the mapping configuration for agent inputs.
            This mapping defines how workflow data is transformed and passed to the associated agent.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Node.OnError">
            <summary>
            Gets or sets the actions to be executed when the node encounters an error.
            Error actions provide a mechanism for graceful error handling and recovery.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Node.OnComplete">
            <summary>
            Gets or sets the actions to be executed when the node completes successfully.
            Completion actions allow for post-processing and workflow continuation logic.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.WorkflowAgent">
            <summary>
            Represents an agent configuration within a workflow node.
            Agents provide the concrete implementation for node functionality and define how the node operates.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.WorkflowAgent.Type">
            <summary>
            Gets or sets the type of the agent.
            The agent type determines the implementation class and capabilities available to the node.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.WorkflowAgent.Id">
            <summary>
            Gets or sets the unique identifier of the agent instance.
            This ID can be used to reference specific agent configurations or implementations.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.AgentInputType">
            <summary>
            Defines the different types of input handling modes for agents within workflow nodes.
            Input types determine how data is passed to and processed by the agent.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.AgentInputType.Thread">
            <summary>
            Inputs are assumed to be part of the conversation thread and are not passed separately.
            In this mode, the agent reads input from the current thread context.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.AgentInputType.Structured">
            <summary>
            The agent expects structured input data passed directly as parameters.
            This mode provides explicit data passing with defined structure and validation.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.NodeInputs">
            <summary>
            Represents the input configuration for a workflow node.
            Node inputs define the expected data structure and schema for information passed to the node.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.NodeInputs.Schema">
            <summary>
            Gets or sets the schema reference for the node's input structure.
            The schema defines the validation rules and structure for data passed to this node.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.SchemaReference">
            <summary>
            Represents a reference to a schema definition.
            Schema references allow for reuse of schema definitions across multiple workflow components.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.SchemaReference.Ref">
            <summary>
            Gets or sets the reference path to the schema definition.
            This reference follows JSON Schema reference syntax to point to another schema.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.OnEventAction">
            <summary>
            Represents an action that can be executed in response to a workflow event.
            Event actions provide the mechanism for conditional logic and dynamic workflow behavior.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.OnEventAction.OnCondition">
            <summary>
            Gets or sets the condition that must be met for this action to execute.
            Conditions allow for sophisticated conditional logic based on workflow state and event data.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.DeclarativeProcessConditionType">
            <summary>
            Defines the types of conditions that can be used in workflow decision-making.
            Condition types determine how and when conditional logic is evaluated.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.DeclarativeProcessConditionType.Eval">
            <summary>
            A condition that evaluates a custom expression against the current workflow state.
            Eval conditions provide maximum flexibility for custom conditional logic.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.DeclarativeProcessConditionType.Always">
            <summary>
            A condition that always evaluates to true, regardless of context.
            Always conditions provide unconditional execution paths.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.DeclarativeProcessConditionType.Default">
            <summary>
            A default condition that activates when no other conditions are met.
            Default conditions provide fallback behavior for unmatched scenarios.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.DeclarativeProcessCondition">
            <summary>
            Represents a condition that controls workflow execution flow and decision-making.
            Conditions evaluate workflow state and determine which actions should be executed.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.DeclarativeProcessCondition.Type">
            <summary>
            Gets or sets the type of condition evaluation to perform.
            The condition type determines how the condition expression is interpreted and evaluated.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.DeclarativeProcessCondition.Expression">
            <summary>
            Gets or sets the expression to evaluate for this condition.
            The expression syntax depends on the condition type and evaluation context.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.DeclarativeProcessCondition.Emits">
            <summary>
            Gets or sets the list of events to emit when this condition is satisfied.
            Event emissions allow conditions to trigger additional workflow behavior.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.DeclarativeProcessCondition.Updates">
            <summary>
            Gets or sets the list of variable updates to perform when this condition is satisfied.
            Variable updates allow conditions to modify workflow state as part of their execution.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.EventEmission">
            <summary>
            Represents an event emission that occurs when a condition is satisfied or an action is executed.
            Event emissions provide a way to communicate state changes and trigger reactions throughout the workflow.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.EventEmission.EventType">
            <summary>
            Gets or sets the type identifier of the event being emitted.
            The event type determines how the event is processed and which listeners will respond to it.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.EventEmission.Schema">
            <summary>
            Gets or sets the schema reference for the event's payload structure.
            The schema ensures that emitted events conform to expected data structures.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.EventEmission.Payload">
            <summary>
            Gets or sets the data payload included with the emitted event.
            The payload contains the actual data that will be passed to event listeners.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.ConditionExpression">
            <summary>
            Represents a condition expression that can be evaluated against workflow data.
            Condition expressions provide structured conditional logic for workflow decision-making.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ConditionExpression.Path">
            <summary>
            Gets or sets the path to the variable or data being evaluated.
            The path uses dot notation to navigate through complex data structures.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ConditionExpression.Operator">
            <summary>
            Gets or sets the comparison operator used in the condition.
            The operator determines how the value at the path is compared to the condition value.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ConditionExpression.Value">
            <summary>
            Gets or sets the value to compare against the path value.
            This value is used with the operator to determine if the condition is satisfied.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.ConditionOperator">
            <summary>
            Defines the comparison operators available for use in condition expressions.
            Operators determine how values are compared in conditional logic.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.ConditionOperator.Equal">
            <summary>
            Tests whether two values are equal.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.ConditionOperator.NotEqual">
            <summary>
            Tests whether two values are not equal.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.ConditionOperator.GreaterThan">
            <summary>
            Tests whether the left value is greater than the right value.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.ConditionOperator.LessThan">
            <summary>
            Tests whether the left value is less than the right value.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.ConditionOperator.GreaterThanOrEqual">
            <summary>
            Tests whether the left value is greater than or equal to the right value.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.ConditionOperator.LessThanOrEqual">
            <summary>
            Tests whether the left value is less than or equal to the right value.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.StateUpdateOperations">
            <summary>
            Defines the types of operations that can be performed when updating workflow state variables.
            Update operations provide different ways to modify variable values during workflow execution.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.StateUpdateOperations.Set">
            <summary>
            Sets the variable to a specific value, replacing any existing value.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.StateUpdateOperations.Increment">
            <summary>
            Increments the variable's value by a specified amount.
            This operation is typically used with numeric variables.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.StateUpdateOperations.Decrement">
            <summary>
            Decrements the variable's value by a specified amount.
            This operation is typically used with numeric variables.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.HITLMode">
            <summary>
            Defines the modes for human-in-the-loop (HITL) interaction within workflow nodes.
            HITL modes determine when and how human intervention is required during workflow execution.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.HITLMode.Always">
            <summary>
            Always requires human input before the node can proceed with execution.
            This mode ensures that human oversight is mandatory for every execution of the node.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.HITLMode.Never">
            <summary>
            Never requires human input and allows the node to execute automatically.
            This mode provides fully automated execution without human intervention.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.VariableUpdate">
            <summary>
            Represents an update operation to be performed on a workflow variable.
            Variable updates allow workflows to modify state based on conditions and execution flow.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.VariableUpdate.Path">
            <summary>
            Gets or sets the path to the variable to be updated.
            The path uses dot notation to specify the exact location of the variable in the state.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.VariableUpdate.Operation">
            <summary>
            Gets or sets the operation to be performed on the variable.
            The operation determines how the variable's value will be modified (set, increment, decrement).
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.VariableUpdate.Value">
            <summary>
            Gets or sets the value to be used in the update operation.
            For set operations, this becomes the new value. For increment/decrement, this is the amount to change.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.OrchestrationStep">
            <summary>
            Represents a single step in the workflow orchestration that defines conditional execution logic.
            Orchestration steps control the flow of execution by listening for events and taking appropriate actions.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.OrchestrationStep.ListenFor">
            <summary>
            Gets or sets the condition that this orchestration step listens for.
            The listen condition determines when this step should be activated and executed.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.OrchestrationStep.Then">
            <summary>
            Gets or sets the list of actions to execute when the listen condition is satisfied.
            These actions define what should happen when the orchestration step is triggered.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.ListenCondition">
            <summary>
            Represents a condition that an orchestration step listens for to determine when to execute its actions.
            Listen conditions can be based on events, state changes, or complex logical expressions.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ListenCondition.Event">
            <summary>
            Gets or sets the specific event name to listen for.
            When specified, the condition will trigger when this event is emitted.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ListenCondition.From">
            <summary>
            Gets or sets the source of the event being listened for.
            This specifies which node or component must emit the event for the condition to trigger.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ListenCondition.Condition">
            <summary>
            Gets or sets a custom condition expression for more complex logic.
            This allows for sophisticated conditional logic beyond simple event matching.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ListenCondition.AllOf">
            <summary>
            Gets or sets a list of events that must all occur for the condition to be satisfied.
            This provides AND logic for multiple event requirements.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.ListenEvent">
            <summary>
            Represents a specific event to listen for in workflow orchestration.
            Listen events specify both the event name and its source for precise event matching.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ListenEvent.Event">
            <summary>
            Gets or sets the name of the event to listen for.
            This identifies the specific type of event that should trigger the condition.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ListenEvent.From">
            <summary>
            Gets or sets the source identifier from which the event must originate.
            This ensures the event comes from the expected node or component.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.ThenAction">
            <summary>
            Represents an action to be executed as part of workflow orchestration logic.
            Actions define what should happen when orchestration conditions are met.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ThenAction.Type">
            <summary>
            Gets or sets the type of action to be performed.
            The action type determines the specific operation (node invocation, state update, event emission).
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ThenAction.Node">
            <summary>
            Gets or sets the identifier of the node to execute when the action type is NodeInvocation.
            This specifies which workflow node should be activated.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ThenAction.Inputs">
            <summary>
            Gets or sets the input mappings to pass to the invoked node.
            These inputs provide data that the target node needs for execution.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ThenAction.MessagesIn">
            <summary>
            Gets or sets the expression that resolves to messages to be passed to the node.
            This allows for dynamic message passing based on workflow state.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ThenAction.Thread">
            <summary>
            Gets or sets the thread identifier to send the event to.
            This specifies which conversation thread should receive the action's output.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ThenAction.Path">
            <summary>
            Gets or sets the path to the variable to be updated when the action type is Update.
            This specifies which workflow variable should be modified.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ThenAction.Operation">
            <summary>
            Gets or sets the operation to be performed on the variable when the action type is Update.
            This determines how the variable's value should be changed.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ThenAction.Value">
            <summary>
            Gets or sets the value to be used in the update operation or as event payload.
            For updates, this is the value to set, increment by, or decrement by.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ThenAction.EmitMessageType">
            <summary>
            Gets or sets the type of message to emit when the action type is Emit.
            This specifies what kind of event should be generated by the action.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ThenAction.EmitMessagePayload">
            <summary>
            Gets or sets the payload data to include with the emitted message.
            This provides the data content that will be sent with the emitted event.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.ThenAction.FromKernelProcessEdge(Microsoft.SemanticKernel.KernelProcessEdge,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.ThenAction"/> class from a <see cref="T:Microsoft.SemanticKernel.KernelProcessEdge"/>.
            This factory method converts internal kernel edge representations to workflow action configurations.
            </summary>
            <param name="edge">The kernel process edge to convert.</param>
            <param name="defaultThread">The default thread identifier to use if none is specified.</param>
            <returns>A new <see cref="T:Microsoft.SemanticKernel.ThenAction"/> instance representing the edge's behavior.</returns>
            <exception cref="T:Microsoft.SemanticKernel.KernelException">Thrown when the edge target type is not supported.</exception>
        </member>
        <member name="T:Microsoft.SemanticKernel.ActionType">
            <summary>
            Defines the types of actions that can be performed in workflow orchestration.
            Action types determine what kind of operation should be executed when conditions are met.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.ActionType.NodeInvocation">
            <summary>
            An action that invokes a specific workflow node to execute its logic.
            Node invocation actions transfer control to another part of the workflow.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.ActionType.Update">
            <summary>
            An action that updates the value of a workflow variable or state.
            Update actions allow workflows to modify their internal state during execution.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.ActionType.Emit">
            <summary>
            An action that emits an event to notify other parts of the workflow.
            Emit actions provide a communication mechanism between workflow components.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.VersionRange">
            <summary>
            Represents a version range specification for compatibility checking.
            Version ranges allow workflows to specify which versions of components they are compatible with.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.VersionRange.MinVersion">
            <summary>
            Gets or sets the minimum version included in this range.
            The minimum version is inclusive, meaning this version is considered part of the range.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.VersionRange.MaxVersionExclusive">
            <summary>
            Gets or sets the maximum version excluded from this range.
            The maximum version is exclusive, meaning this version is not included in the range.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.ErrorHandling">
            <summary>
            Represents the error handling configuration for a workflow.
            Error handling defines how the workflow should respond to and recover from various types of errors.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ErrorHandling.OnError">
            <summary>
            Gets or sets the specific error handling steps that respond to particular error conditions.
            These steps provide targeted error handling for specific scenarios or error types.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ErrorHandling.Default">
            <summary>
            Gets or sets the default actions to be taken when no specific error handling matches.
            Default actions provide fallback behavior for unexpected or unhandled error conditions.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.ErrorHandlingStep">
            <summary>
            Represents a single error handling step that responds to specific error conditions.
            Error handling steps provide conditional logic for responding to different types of errors.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ErrorHandlingStep.ListenFor">
            <summary>
            Gets or sets the condition that determines when this error handling step should be activated.
            The listen condition specifies which error events or conditions trigger this step.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ErrorHandlingStep.Then">
            <summary>
            Gets or sets the actions to execute when the error condition is met.
            These actions define the error recovery or handling logic for the specific error scenario.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.ErrorListenCondition">
            <summary>
            Represents a condition that triggers error handling logic in the workflow.
            Error listen conditions specify which types of errors should activate error handling steps.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ErrorListenCondition.Event">
            <summary>
            Gets or sets the name of the error event to listen for.
            This identifies the specific type of error that should trigger the associated error handling actions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ActivityExtensions.StartActivityWithTags(System.Diagnostics.ActivitySource,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Diagnostics.ActivityKind)">
            <summary>
            Starts an activity with the specified name and tags.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ActivityExtensions.SetTags(System.Diagnostics.Activity,System.ReadOnlySpan{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Adds tags to the activity.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ActivityExtensions.AttachSensitiveDataAsEvent(System.Diagnostics.Activity,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Adds an event to the activity. Should only be used for events that contain sensitive data.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ActivityExtensions.SetError(System.Diagnostics.Activity,System.Exception)">
            <summary>
            Sets the error status and type on the activity.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics">
            <summary>
            Model diagnostics helper class that provides a set of methods to trace model activities with the OTel semantic conventions.
            This class contains experimental features and may change in the future.
            To enable these features, set one of the following switches to true:
                `Microsoft.SemanticKernel.Experimental.GenAI.EnableOTelDiagnostics`
                `Microsoft.SemanticKernel.Experimental.GenAI.EnableOTelDiagnosticsSensitive`
            Or set the following environment variables to true:
               `SEMANTICKERNEL_EXPERIMENTAL_GENAI_ENABLE_OTEL_DIAGNOSTICS`
               `SEMANTICKERNEL_EXPERIMENTAL_GENAI_ENABLE_OTEL_DIAGNOSTICS_SENSITIVE`
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.StartCompletionActivity``1(System.Uri,System.String,System.String,System.String,``0)">
            <summary>
            Start a text completion activity for a given model.
            The activity will be tagged with the a set of attributes specified by the semantic conventions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.StartCompletionActivity``1(System.Uri,System.String,System.String,Microsoft.SemanticKernel.ChatCompletion.ChatHistory,``0)">
            <summary>
            Start a chat completion activity for a given model.
            The activity will be tagged with the a set of attributes specified by the semantic conventions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.StartAgentInvocationActivity(System.String,System.String,System.String)">
            <summary>
            Start an agent invocation activity and return the activity.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetCompletionResponse(System.Diagnostics.Activity,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.TextContent},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Set the text completion response for a given activity.
            The activity will be enriched with the response attributes specified by the semantic conventions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetCompletionResponse(System.Diagnostics.Activity,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Set the chat completion response for a given activity.
            The activity will be enriched with the response attributes specified by the semantic conventions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.EndStreaming(System.Diagnostics.Activity,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.StreamingKernelContent},System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.FunctionCallContent},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Notify the end of streaming for a given activity.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetResponseId(System.Diagnostics.Activity,System.String)">
            <summary>
            Set the response id for a given activity.
            </summary>
            <param name="activity">The activity to set the response id</param>
            <param name="responseId">The response id</param>
            <returns>The activity with the response id set for chaining</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetInputTokensUsage(System.Diagnostics.Activity,System.Int32)">
            <summary>
            Set the input tokens usage for a given activity.
            </summary>
            <param name="activity">The activity to set the input tokens usage</param>
            <param name="inputTokens">The number of input tokens used</param>
            <returns>The activity with the input tokens usage set for chaining</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetOutputTokensUsage(System.Diagnostics.Activity,System.Int32)">
            <summary>
            Set the output tokens usage for a given activity.
            </summary>
            <param name="activity">The activity to set the output tokens usage</param>
            <param name="outputTokens">The number of output tokens used</param>
            <returns>The activity with the output tokens usage set for chaining</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.IsModelDiagnosticsEnabled">
            <summary>
            Check if model diagnostics is enabled
            Model diagnostics is enabled if either EnableModelDiagnostics or EnableSensitiveEvents is set to true and there are listeners.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.IsSensitiveEventsEnabled">
            <summary>
            Check if sensitive events are enabled.
            Sensitive events are enabled if EnableSensitiveEvents is set to true and there are listeners.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.ToGenAIConventionsFormat(Microsoft.SemanticKernel.ChatMessageContent,System.Text.StringBuilder)">
            <summary>
            Convert a chat message to a string aligned with the OTel GenAI Semantic Conventions format
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.ToGenAIConventionsFormat(Microsoft.SemanticKernel.ChatCompletion.ChatMessageContentItemCollection,System.Text.StringBuilder)">
            <summary>
            Helper method to convert tool calls to a string aligned with the OTel GenAI Semantic Conventions format
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.ToGenAIConventionsChoiceFormat(Microsoft.SemanticKernel.ChatMessageContent,System.Int32)">
            <summary>
            Convert a chat model response to a string aligned with the OTel GenAI Semantic Conventions format
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.ToGenAIConventionsChoiceFormat(Microsoft.SemanticKernel.TextContent,System.Int32)">
            <summary>
            Convert a text model response to a string aligned with the OTel GenAI Semantic Conventions format
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetCompletionResponse``1(System.Diagnostics.Activity,System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Func{``0,System.Int32,System.String})">
            <summary>
            Set the completion response for a given activity.
            The `formatCompletions` delegate won't be invoked if events are disabled.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetCompletionResponse(System.Diagnostics.Activity,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{Microsoft.SemanticKernel.StreamingKernelContent}},System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.FunctionCallContent},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Set the streaming completion response for a given activity.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.OrganizeStreamingContent(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.StreamingKernelContent})">
            <summary>
            Organize streaming content by choice index
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.ModelDiagnosticsTags">
            <summary>
            Tags used in model diagnostics
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelVerify.AsciiLettersDigitsUnderscoresRegex">
            <remarks>
            Pattern:<br/>
            <code>^[0-9A-Za-z_]*$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [0-9A-Z_a-z] atomically any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelVerify.ParametersUniqueness(System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.KernelParameterMetadata})">
            <summary>
            Make sure every function parameter name is unique
            </summary>
            <param name="parameters">List of parameters</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Throw">
            <summary>
            Defines static methods used to throw exceptions.
            </summary>
            <remarks>
            The main purpose is to reduce code size, improve performance, and standardize exception
            messages.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfNull``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified argument is <see langword="null"/>.
            </summary>
            <typeparam name="T">Argument type to be checked for <see langword="null"/>.</typeparam>
            <param name="argument">Object to be checked for <see langword="null"/>.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfNullOrMemberNull``2(``0,``1,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified argument is <see langword="null"/>,
            or <see cref="T:System.ArgumentException" /> if the specified member is <see langword="null"/>.
            </summary>
            <typeparam name="TParameter">Argument type to be checked for <see langword="null"/>.</typeparam>
            <typeparam name="TMember">Member type to be checked for <see langword="null"/>.</typeparam>
            <param name="argument">Argument to be checked for <see langword="null"/>.</param>
            <param name="member">Object member to be checked for <see langword="null"/>.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <param name="memberName">The name of the member.</param>
            <returns>The original value of <paramref name="member"/>.</returns>
            <example>
            <code language="csharp">
            Throws.IfNullOrMemberNull(myObject, myObject?.MyProperty)
            </code>
            </example>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfMemberNull``2(``0,``1,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> if the specified member is <see langword="null"/>.
            </summary>
            <typeparam name="TParameter">Argument type.</typeparam>
            <typeparam name="TMember">Member type to be checked for <see langword="null"/>.</typeparam>
            <param name="argument">Argument to which member belongs.</param>
            <param name="member">Object member to be checked for <see langword="null"/>.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <param name="memberName">The name of the member.</param>
            <returns>The original value of <paramref name="member"/>.</returns>
            <example>
            <code language="csharp">
            Throws.IfMemberNull(myObject, myObject.MyProperty)
            </code>
            </example>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfNullOrWhitespace(System.String,System.String)">
            <summary>
            Throws either an <see cref="T:System.ArgumentNullException"/> or an <see cref="T:System.ArgumentException"/>
            if the specified string is <see langword="null"/> or whitespace respectively.
            </summary>
            <param name="argument">String to be checked for <see langword="null"/> or whitespace.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the string is <see langword="null"/>,
            or <see cref="T:System.ArgumentException"/> if it is empty.
            </summary>
            <param name="argument">String to be checked for <see langword="null"/> or empty.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfBufferTooSmall(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if the argument's buffer size is less than the required buffer size.
            </summary>
            <param name="bufferSize">The actual buffer size.</param>
            <param name="requiredSize">The required buffer size.</param>
            <param name="paramName">The name of the parameter to be checked.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfOutOfRange``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the enum value is not valid.
            </summary>
            <param name="argument">The argument to evaluate.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the collection is <see langword="null"/>,
            or <see cref="T:System.ArgumentException"/> if it is empty.
            </summary>
            <param name="argument">The collection to evaluate.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <typeparam name="T">The type of objects in the collection.</typeparam>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentNullException(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentNullException(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentOutOfRangeException(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentOutOfRangeException(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentOutOfRangeException(System.String,System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="actualValue">The value of the argument that caused this exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentException(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentException(System.String,System.String,System.Exception)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <remarks>
            If the <paramref name="innerException"/> is not a <see langword="null"/>, the current exception is raised in a catch
            block that handles the inner exception.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.InvalidOperationException(System.String)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.InvalidOperationException(System.String,System.Exception)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThan(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>  if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThan(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThanOrEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThanOrEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfOutOfRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfZero(System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThan(System.UInt32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>  if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThan(System.UInt32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThanOrEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThanOrEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfOutOfRange(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfZero(System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThan(System.Int64,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>  if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThan(System.Int64,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThanOrEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThanOrEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfOutOfRange(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfZero(System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThan(System.UInt64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>  if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThan(System.UInt64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThanOrEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThanOrEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfOutOfRange(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfZero(System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThan(System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThan(System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThanOrEqual(System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThanOrEqual(System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfOutOfRange(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfZero(System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Verify.AsciiLettersDigitsUnderscoresRegex">
            <remarks>
            Pattern:<br/>
            <code>^[0-9A-Za-z_]*$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [0-9A-Z_a-z] atomically any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Verify.FilenameRegex">
            <remarks>
            Pattern:<br/>
            <code>^[^.]+\\.[^.]+$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character other than '.' atomically at least once.<br/>
            ○ Match '.'.<br/>
            ○ Match a character other than '.' greedily at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Verify.NotNull(System.Object,System.String)">
            <summary>
            Equivalent of ArgumentNullException.ThrowIfNull
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Verify.ValidHostnameSegment(System.String,System.String)">
            <summary>
            Validates that a hostname segment string is safe for use as a URL segment, preventing URL injection.
            </summary>
            <param name="hostNameSegment">The hostname segment string to validate (e.g., 'us-east1', 'europe-west4')</param>
            <param name="paramName">Optional parameter name for the exception</param>
            <exception cref="T:System.ArgumentException">Thrown when the location contains invalid characters or patterns</exception>
        </member>
        <member name="T:Microsoft.SemanticKernel.FunctionName">
            <summary>
            Represents a function name.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionName.PluginName">
            <summary>
            The plugin name.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionName.Name">
            <summary>
            The function name.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionName.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.FunctionName"/> class.
            </summary>
            <param name="name">The function name.</param>
            <param name="pluginName">The plugin name.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionName.ToFullyQualifiedName(System.String,System.String,System.String)">
            <summary>
            Gets the fully-qualified name of the function.
            </summary>
            <param name="functionName">The function name.</param>
            <param name="pluginName">The plugin name.</param>
            <param name="functionNameSeparator">The function name separator.</param>
            <returns>Fully-qualified name of the function.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionName.Parse(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.FunctionName"/> class.
            </summary>
            <param name="fullyQualifiedName">Fully-qualified name of the function.</param>
            <param name="functionNameSeparator">The function name separator.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpClientExtensions.SendWithSuccessCheckAsync(System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
            Sends an HTTP request using the provided <see cref="T:System.Net.Http.HttpClient"/> instance and checks for a successful response.
            If the response is not successful, it logs an error and throws an <see cref="T:Microsoft.SemanticKernel.HttpOperationException"/>.
            </summary>
            <param name="client">The <see cref="T:System.Net.Http.HttpClient"/> instance to use for sending the request.</param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> to send.</param>
            <param name="completionOption">Indicates if HttpClient operations should be considered completed either as soon as a response is available,
            or after reading the entire response message including the content.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> for canceling the request.</param>
            <returns>The <see cref="T:System.Net.Http.HttpResponseMessage"/> representing the response.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpClientExtensions.SendWithSuccessCheckAsync(System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Sends an HTTP request using the provided <see cref="T:System.Net.Http.HttpClient"/> instance and checks for a successful response.
            If the response is not successful, it logs an error and throws an <see cref="T:Microsoft.SemanticKernel.HttpOperationException"/>.
            </summary>
            <param name="client">The <see cref="T:System.Net.Http.HttpClient"/> instance to use for sending the request.</param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> to send.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> for canceling the request.</param>
            <returns>The <see cref="T:System.Net.Http.HttpResponseMessage"/> representing the response.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Http.HttpClientProvider">
            <summary>
            Provides functionality for retrieving instances of HttpClient.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpClientProvider.GetHttpClient">
            <summary>
            Retrieves an instance of HttpClient.
            </summary>
            <returns>An instance of HttpClient.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpClientProvider.GetHttpClient(System.Net.Http.HttpClient)">
            <summary>
            Retrieves an instance of HttpClient.
            </summary>
            <returns>An instance of HttpClient.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpClientProvider.GetHttpClient(System.IServiceProvider)">
            <summary>
            Retrieves an instance of HttpClient.
            </summary>
            <returns>An instance of HttpClient.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpClientProvider.GetHttpClient(System.Net.Http.HttpClient,System.IServiceProvider)">
            <summary>
            Retrieves an instance of HttpClient.
            </summary>
            <returns>An instance of HttpClient.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Http.HttpClientProvider.NonDisposableHttpClientHandler">
            <summary>
            Represents a singleton implementation of <see cref="T:System.Net.Http.HttpClientHandler"/> that is not disposable.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpClientProvider.NonDisposableHttpClientHandler.#ctor">
            <summary>
            Private constructor to prevent direct instantiation of the class.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Http.HttpClientProvider.NonDisposableHttpClientHandler.Instance">
            <summary>
            Gets the singleton instance of <see cref="T:Microsoft.SemanticKernel.Http.HttpClientProvider.NonDisposableHttpClientHandler"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpClientProvider.NonDisposableHttpClientHandler.Dispose(System.Boolean)">
            <summary>
            Disposes the underlying resources held by the <see cref="T:Microsoft.SemanticKernel.Http.HttpClientProvider.NonDisposableHttpClientHandler"/>.
            This implementation does nothing to prevent unintended disposal, as it may affect all references.
            </summary>
            <param name="disposing">True if called from <see cref="M:Microsoft.SemanticKernel.Http.HttpClientProvider.NonDisposableHttpClientHandler.Dispose(System.Boolean)"/>, false if called from a finalizer.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Http.HttpContentExtensions">
            <summary>
            Provides extension methods for working with HTTP content in a way that translates HttpRequestExceptions into HttpOperationExceptions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpContentExtensions.ReadAsStringWithExceptionMappingAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <summary>
            Reads the content of the HTTP response as a string and translates any HttpRequestException into an HttpOperationException.
            </summary>
            <param name="httpContent">The HTTP content to read.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A string representation of the HTTP content.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpContentExtensions.ReadAsStreamAndTranslateExceptionAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <summary>
            Reads the content of the HTTP response as a stream and translates any HttpRequestException into an HttpOperationException.
            </summary>
            <param name="httpContent">The HTTP content to read.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A stream representing the HTTP content.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpContentExtensions.ReadAsByteArrayAndTranslateExceptionAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <summary>
            Reads the content of the HTTP response as a byte array and translates any HttpRequestException into an HttpOperationException.
            </summary>
            <param name="httpContent">The HTTP content to read.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A byte array representing the HTTP content.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Http.HttpHeaderConstant">
            <summary>Provides HTTP header names and values for common purposes.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Http.HttpHeaderConstant.Names.SemanticKernelVersion">
            <summary>HTTP header name to use to include the Semantic Kernel package version in all HTTP requests issued by Semantic Kernel.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Http.HttpHeaderConstant.Names.UserAgent">
            <summary>HTTP User-Agent header name.</summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Http.HttpHeaderConstant.Values.UserAgent">
            <summary>User agent string to use for all HTTP requests issued by Semantic Kernel.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpHeaderConstant.Values.GetAssemblyVersion(System.Type)">
            <summary>
            Gets the version of the <see cref="T:System.Reflection.Assembly"/> in which the specific type is declared.
            </summary>
            <param name="type">Type for which the assembly version is returned.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Http.HttpResponseStream">
            <summary>
            Associate a response stream with its parent response for parity in life-cycle management.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Http.HttpResponseStream.#ctor(System.IO.Stream,System.Net.Http.HttpResponseMessage)">
            <summary>
            Associate a response stream with its parent response for parity in life-cycle management.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Freezable">
            <summary>
            Represents a freezable object.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Freezable.Freeze">
            <summary>
            Makes the current instance unmodifiable.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Freezable.ThrowIfFrozen">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the object is frozen.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Microsoft.SemanticKernel.AppContextSwitchHelper">
            <summary>
            Helper class to get app context switch value
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AppContextSwitchHelper.GetConfigValue(System.String,System.String)">
            <summary>
            Returns the value of the specified app switch or environment variable if it is set.
            If the switch or environment variable is not set, return false.
            The app switch value takes precedence over the environment variable.
            </summary>
            <param name="appContextSwitchName">The name of the app switch.</param>
            <param name="envVarName">The name of the environment variable.</param>
            <returns>The value of the app switch or environment variable if it is set; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.IListExtensions.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a range of elements from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> source to the target <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="target">The target <see cref="T:System.Collections.Generic.IList`1"/> to add elements to.</param>
            <param name="source">The source <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing elements to add to the target <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.InternalTypeConverter">
            <summary>
            Provides internal utility methods for converting types to strings with consideration for CultureInfo.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.InternalTypeConverter.ConvertToString(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the given object value to a string representation using the appropriate CultureInfo.
            </summary>
            <param name="value">The object to convert.</param>
            <param name="culture">The CultureInfo to consider during conversion.</param>
            <returns>A string representation of the object value, considering the specified CultureInfo.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.InternalTypeConverter.GetTypeToStringConverterDelegate(System.Type)">
            <summary>
            Retrieves a type-to-string converter delegate for the specified source type.
            </summary>
            <param name="sourceType">The source Type for which to retrieve the type-to-string converter delegate.</param>
            <returns>A Func delegate for converting the source type to a string, considering CultureInfo, or null if no suitable converter is found.</returns>
        </member>
        <member name="F:Microsoft.SemanticKernel.InternalTypeConverter.s_converters">
            <summary>Converter functions for converting types to strings.</summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.NonNullCollection`1">
            <summary>
            Provides a collection of non-null items.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.NonNullCollection`1._items">
            <summary>
            The underlying list of items.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.NonNullCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.NonNullCollection`1"/> class.
            </summary>
            <param name="items">The initial collection of items to populate this collection.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.NonNullCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to get or set.</param>
            <returns>The item at the specified index.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index"/> was not valid for this collection.</exception>
        </member>
        <member name="P:Microsoft.SemanticKernel.NonNullCollection`1.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.Add(`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.Contains(`0)">
            <summary>
            Determines whether an item is in the collection.
            </summary>
            <param name="item">The item to locate.</param>
            <returns>True if the item is found in the collection; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all of the items in the collection to an array, starting at the specified destination array index.
            </summary>
            <param name="array">The destination array into which the items should be copied.</param>
            <param name="arrayIndex">The zero-based index into <paramref name="array"/> at which copying should begin.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The number of items in the collection is greater than the available space from <paramref name="arrayIndex"/> to the end of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.IndexOf(`0)">
            <summary>
            Searches for the specified item and returns the index of the first occurrence.
            </summary>
            <param name="item">The item to locate.</param>
            <returns>The index of the first found occurrence of the specified item; -1 if the item could not be found.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The index at which the item should be inserted.</param>
            <param name="item">The item to insert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of the specified item from the collection.
            </summary>
            <param name="item">The item to remove from the collection.</param>
            <returns>True if the item was successfully removed; false if it wasn't located in the collection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from the collection.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.TypeConverterFactory">
            <summary>
            Factory for creating TypeConverter instances based on a provided type.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TypeConverterFactory.GetTypeConverter(System.Type)">
            <summary>
            Returns a TypeConverter instance for the specified type.
            </summary>
            <param name="type">The Type of the object to convert.</param>
            <returns>A TypeConverter instance if a suitable converter is found, otherwise null.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.BoolJsonConverter">
            <summary>
            Deserializes a bool from a string. This is useful when deserializing a <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> instance that contains bool properties.
            Serializing a <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> instance without this converter will throw a 'System.Text.Json.JsonException : The JSON value could not be converted to System.Nullable'
            if there are any bool properties.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.BoolJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.BoolJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Boolean,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.DataUriParser">
            <summary>
            Data Uri Scheme Parser based on RFC 2397.
            https://datatracker.ietf.org/doc/html/rfc2397
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.DataUriParser.IsBase64String(System.String)">
            <summary>
            Extension method to test whether the value is a base64 string
            </summary>
            <param name="value">Value to test</param>
            <returns>Boolean value, true if the string is base64, otherwise false</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.DataUriParser.DataUri">
            <summary>
            Represents the data URI parts.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.DataUriParser.DataUri.MimeType">
            <summary>
            The mime type of the data.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.DataUriParser.DataUri.Parameters">
            <summary>
            The optional parameters of the data.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.DataUriParser.DataUri.DataFormat">
            <summary>
            The optional format of the data. Most common is "base64".
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.DataUriParser.DataUri.Data">
            <summary>
            The data content.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.ExceptionJsonConverter">
            <summary>
            Serializes an exception as a string. This is useful when serializing an instance of an exception directly or indirectly via serializing an instance that
            references an exception. For example, when serializing chat history that contains FunctionCallContent or FunctionResultContent items referencing an exception.
            Serializing an exception without this converter will throw a System.NotSupportedException: Serialization and deserialization of System.Reflection.MethodBase instances is not supported. Path: $.Items.Exception.TargetSite.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.ExceptionJsonConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.ExceptionJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Object,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.ExceptionJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.JsonOptionsCache">
            <summary>Caches common configurations of <see cref="T:System.Text.Json.JsonSerializerOptions"/>.</summary>\
            <remarks>
            All of the instances include a converter for <see cref="T:System.ReadOnlyMemory`1"/>.
            Once the System.Text.Json package is upgraded to 8.0+, this will no longer be
            necessary and the actual default can be used.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.JsonOptionsCache.Default">
            <summary>
            Cached <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance for reading and writing JSON using the default settings.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.JsonOptionsCache.WriteIndented">
            <summary>
            Cached <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance for writing JSON with indentation.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.JsonOptionsCache.ReadPermissive">
            <summary>
            Cached <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance for reading JSON in a permissive way,
            including support for trailing commas, case-insensitive property names, and comments.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.JsonOptionsCache.ChatHistory">
            <summary>
            Gets the <see cref="T:System.Text.Json.JsonSerializerOptions"/> configured for serializing chat history data.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.OptionalBoolJsonConverter">
            <summary>
            Deserializes a bool from a string. This is useful when deserializing a <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> instance that contains bool properties.
            Serializing a <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> instance without this converter will throw a 'System.Text.Json.JsonException : The JSON value could not be converted to System.Nullable'
            if there are any bool properties.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.OptionalBoolJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.OptionalBoolJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Nullable{System.Boolean},System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.SseData">
            <summary>
            Represents a single Server-Sent Events (SSE) data object.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.SseData.EventName">
            <summary>
            The name of the sse event.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.SseData.DataType">
            <summary>
            Represents the type of data parsed from SSE message.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.SseData.Data">
            <summary>
            Represents the data parsed from SSE message.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.SseData.#ctor(System.String,System.Object)">
            <summary>
            Represents a single Server-Sent Events (SSE) data object.
            </summary>
            <param name="eventName">The name of the sse event.</param>
            <param name="data">The data parsed from SSE message.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.SseJsonParser">
            <summary>
            Internal class for parsing Server-Sent Events (SSE) data from a stream.
            </summary>
            <remarks>
            This is specialized parser for Server-Sent Events (SSE) data that is formatted as JSON.<br/>
            If you need to parse non-structured json streaming data, use <see cref="T:Microsoft.SemanticKernel.Text.StreamJsonParser"/> instead.<br/>
            <a href="https://html.spec.whatwg.org/multipage/server-sent-events.html#parsing-an-event-stream">SSE specification</a><br/>
            This class is thread-safe.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.SseJsonParser.ParseAsync(System.IO.Stream,System.Func{Microsoft.SemanticKernel.Text.SseLine,Microsoft.SemanticKernel.Text.SseData},System.Threading.CancellationToken)">
            <summary>
            Parses Server-Sent Events (SSE) data asynchronously from a stream.
            </summary>
            <param name="stream">The stream containing the SSE data.</param>
            <param name="parser">The function to parse each <see cref="T:Microsoft.SemanticKernel.Text.SseLine"/> into an <see cref="T:Microsoft.SemanticKernel.Text.SseData"/> object.</param>
            <param name="cancellationToken">A cancellation token to stop the parsing process.</param>
            <remarks><paramref name="stream"/> will be disposed immediately once enumeration is complete.</remarks>
            <returns>An asynchronous enumerable sequence of <see cref="T:Microsoft.SemanticKernel.Text.SseData"/> objects.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.SseJsonParser.ParseAsync``1(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Parses Server-Sent Events (SSE) data asynchronously from a stream and deserializes the data into the specified type.
            </summary>
            <typeparam name="T">The type to deserialize the data into.</typeparam>
            <param name="stream">The stream containing the SSE data.</param>
            <param name="cancellationToken">A cancellation token to stop the parsing process.</param>
            <returns>An asynchronous enumerable sequence of deserialized objects of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.SseLine">
            <summary>
            Represents a line of a Server-Sent Events (SSE) stream.
            </summary>
            <remarks>
            <a href="https://html.spec.whatwg.org/multipage/server-sent-events.html#parsing-an-event-stream">SSE specification</a>
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.SseLine.Empty">
            <summary>
            Represents an empty SSE line.
            </summary>
            <remarks>
            The <see cref="P:Microsoft.SemanticKernel.Text.SseLine.Empty"/> property is a static instance of the <see cref="T:Microsoft.SemanticKernel.Text.SseLine"/> struct.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.SseLine.EventName">
            <summary>
            The name of the last event for the Server-Sent Events (SSE) line.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.SseLine.IsEmpty">
            <summary>
            Determines whether the SseLine is empty.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.SseLine.IsValueEmpty">
            <summary>
            Gets a value indicating whether the value of the SseLine is empty.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.SseLine.IsComment">
            <summary>
            Determines whether the SseLine is comment line.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.SseLine.FieldName">
            <summary>
            Represents a field name in a Server-Sent Events (SSE) line.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.SseLine.FieldValue">
            <summary>
            Represents a field value in Server-Sent Events (SSE) format.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.SseLine.ToString">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.SseLine.Equals(Microsoft.SemanticKernel.Text.SseLine)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.SseLine.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.SseLine.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.SseLine.op_Equality(Microsoft.SemanticKernel.Text.SseLine,Microsoft.SemanticKernel.Text.SseLine)">
            <summary>
            Defines the equality operator for comparing two instances of the SseLine class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.SseLine.op_Inequality(Microsoft.SemanticKernel.Text.SseLine,Microsoft.SemanticKernel.Text.SseLine)">
            <summary>
            Represents the inequality operator for comparing two SseLine objects.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.SseReader">
            <summary>
            Provides a reader for Server-Sent Events (SSE) data.
            </summary>
            <remarks>
            <a href="https://html.spec.whatwg.org/multipage/server-sent-events.html#parsing-an-event-stream">SSE specification</a>
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.SseReader.#ctor(System.IO.Stream)">
            <summary>
            Provides a reader for Server-Sent Events (SSE) data.
            </summary>
            <remarks>
            <a href="https://html.spec.whatwg.org/multipage/server-sent-events.html#parsing-an-event-stream">SSE specification</a>
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.StreamJsonParser">
            <summary>
            Internal class for parsing a stream of text which contains a series of discrete JSON strings into en enumerable containing each separate JSON string.
            </summary>
            <remarks>
            This is universal parser for parsing stream of text which contains a series of discrete JSON.<br/>
            If you need a specialized SSE parser, use <see cref="T:Microsoft.SemanticKernel.Text.SseJsonParser"/> instead.<br/>
            This class is thread-safe.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.StreamJsonParser.ParseAsync(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Parses a Stream containing JSON data and yields the individual JSON objects.
            </summary>
            <param name="stream">The Stream containing the JSON data.</param>
            <param name="validateJson">Set to true to enable checking json chunks are well-formed. Default is false.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>An enumerable collection of string representing the individual JSON objects.</returns>
            <remarks>Stream will be disposed after parsing.</remarks>
        </member>
        <member name="T:Microsoft.Extensions.VectorData.VectorStoreErrorHandler">
            <summary>
            Contains helpers for reading vector store model properties and their attributes.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.EmptyKeyedServiceProvider">
            <summary>Provides an implementation of <see cref="T:Microsoft.Extensions.DependencyInjection.IKeyedServiceProvider"/> that contains no services.</summary>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.EmptyKeyedServiceProvider.Instance">
            <summary>Gets a singleton instance of <see cref="T:Microsoft.Extensions.DependencyInjection.EmptyKeyedServiceProvider"/>.</summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EmptyKeyedServiceProvider.GetService(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EmptyKeyedServiceProvider.GetKeyedService(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EmptyKeyedServiceProvider.GetRequiredKeyedService(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.ExceptionExtensions">
            <summary>
            Exception extension methods.
            </summary>
        </member>
        <member name="M:System.ExceptionExtensions.IsCriticalException(System.Exception)">
            <summary>
            Check if an exception is of a type that should not be caught by the kernel.
            </summary>
            <param name="ex">Exception.</param>
            <returns>True if <paramref name="ex"/> is a critical exception and should not be caught.</returns>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AnyAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Determines whether any element of an async-enumerable sequence satisfies a condition.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence whose elements to apply the predicate to.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element determining whether any elements in the source sequence pass the test in the specified predicate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SelectAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Projects each element of an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> into a new form by incorporating
            an asynchronous transformation function.
            </summary>
            <typeparam name="TSource">The type of the elements of the source sequence.</typeparam>
            <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> to invoke a transform function on.</param>
            <param name="selector">
            A transform function to apply to each element. This function takes an element of
            type TSource and returns an element of type TResult.
            </param>
            <param name="cancellationToken">
            A CancellationToken to observe while iterating through the sequence.
            </param>
            <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> whose elements are the result of invoking the transform
            function on each element of the original sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the source or selector is null.</exception>
        </member>
        <member name="M:System.EnvExtensions.GetBoolEnvVar(System.String)">
            <summary>
            Source: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/src/DiagnosticsOptions.cs
            Values: https://learn.microsoft.com/en-us/dotnet/api/azure.core.diagnosticsoptions.istelemetryenabled?view=azure-dotnet
            </summary>
        </member>
        <member name="T:System.TypeExtensions">
            <summary>
            Extensions methods for <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:System.TypeExtensions.TryGetGenericResultType(System.Type,System.Type@)">
            <summary>
            Tries to get the result type from a generic parameter.
            </summary>
            <param name="returnType">Return type.</param>
            <param name="resultType">The result type of the Nullable generic parameter.</param>
            <returns><c>true</c> if the result type was successfully retrieved; otherwise, <c>false</c>.</returns>
            TODO [@teresaqhoang]: Issue #4202 Cache Generic Types Extraction - Handlebars
        </member>
        <member name="M:System.TypeExtensions.GetFriendlyTypeName(System.Type)">
            <summary>
            Returns a string with the type's name. If the type is generic, it also includes the type parameters in a readable format.
            </summary>
            <param name="type">Target type.</param>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AsciiLettersDigitsUnderscoresRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FilenameRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the FilenameRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.FilenameRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FilenameRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FilenameRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FilenameRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FilenameRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FilenameRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FilenameRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FilenameRegex_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiWordChars">
            <summary>Supports searching for characters in or not in "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".</summary>
        </member>
    </members>
</doc>
