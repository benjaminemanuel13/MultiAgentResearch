<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.SemanticKernel.Agents.Orchestration</name>
    </assembly>
    <members>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.AgentActor">
            <summary>
            An actor that represents an <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentActor.#ctor(Microsoft.SemanticKernel.Agents.Runtime.AgentId,Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationContext,Microsoft.SemanticKernel.Agents.Agent,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.AgentActor"/> class.
            </summary>
            <param name="id">The unique identifier of the agent.</param>
            <param name="runtime">The runtime associated with the agent.</param>
            <param name="context">The orchestration context.</param>
            <param name="agent">An <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/>.</param>
            <param name="logger">The logger to use for the actor</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.AgentActor.Agent">
            <summary>
            Gets the associated agent.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.AgentActor.Thread">
            <summary>
            Gets or sets the current conversation thread used during agent communication.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentActor.CreateInvokeOptions">
            <summary>
            Optionally overridden to create custom invocation options for the agent.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentActor.ResponseCallbackFilter(Microsoft.SemanticKernel.ChatMessageContent)">
            <summary>
            Optionally overridden to introduce customer filtering logic for the response callback.
            </summary>
            <param name="response">The agent response</param>
            <returns>true if the response should be filtered (hidden)</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentActor.DeleteThreadAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes the agent thread.
            </summary>
            <param name="cancellationToken">A cancellation token that can be used to cancel the operation.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentActor.InvokeAsync(Microsoft.SemanticKernel.ChatMessageContent,System.Threading.CancellationToken)">
            <summary>
            Invokes the agent with a single chat message.
            This method sets the message role to <see cref="P:Microsoft.SemanticKernel.ChatCompletion.AuthorRole.User"/> and delegates to the overload accepting multiple messages.
            </summary>
            <param name="input">The chat message content to send.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the operation.</param>
            <returns>A task that returns the response <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentActor.InvokeAsync(System.Collections.Generic.IList{Microsoft.SemanticKernel.ChatMessageContent},System.Threading.CancellationToken)">
            <summary>
            Invokes the agent with multiple chat messages.
            Processes the response items and consolidates the messages into a single <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/>.
            </summary>
            <param name="input">The list of chat messages to send.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the operation.</param>
            <returns>A task that returns the response <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentActor.InvokeStreamingAsync(Microsoft.SemanticKernel.ChatMessageContent,System.Threading.CancellationToken)">
            <summary>
            Invokes the agent and streams chat message responses asynchronously.
            Yields each streaming message as it becomes available.
            </summary>
            <param name="input">The chat message content to send.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the stream.</param>
            <returns>An asynchronous stream of <see cref="T:Microsoft.SemanticKernel.StreamingChatMessageContent"/> responses.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationResponseCallback">
            <summary>
            Called for every response is produced by any agent.
            </summary>
            <param name="response">The agent response</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationInteractiveCallback">
            <summary>
            Called when human interaction is requested.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2">
            <summary>
            Base class for multi-agent agent orchestration patterns.
            </summary>
            <typeparam name="TInput">The type of the input to the orchestration.</typeparam>
            <typeparam name="TOutput">The type of the result output by the orchestration.</typeparam>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2.#ctor(Microsoft.SemanticKernel.Agents.Agent[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2"/> class.
            </summary>
            <param name="members">Specifies the member agents or orchestrations participating in this orchestration.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2.Description">
            <summary>
            Gets the description of the orchestration.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2.Name">
            <summary>
            Gets the name of the orchestration.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2.LoggerFactory">
            <summary>
            Gets the associated logger.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2.InputTransform">
            <summary>
            Transforms the orchestration input into a source input suitable for processing.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2.ResultTransform">
            <summary>
            Transforms the processed result into the final output form.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2.ResponseCallback">
            <summary>
            Optional callback that is invoked for every agent response.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2.Members">
            <summary>
            Gets the list of member targets involved in the orchestration.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2.OrchestrationLabel">
            <summary>
            Orchestration identifier without generic parameters for use in
            agent type and topic formatting as well as logging.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2.InvokeAsync(`0,Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,System.Threading.CancellationToken)">
            <summary>
            Initiates processing of the orchestration.
            </summary>
            <param name="input">The input message.</param>
            <param name="runtime">The runtime associated with the orchestration.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the operation.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2.StartAsync(Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,Microsoft.SemanticKernel.Agents.Runtime.TopicId,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent},System.Nullable{Microsoft.SemanticKernel.Agents.Runtime.AgentType})">
            <summary>
            Initiates processing according to the orchestration pattern.
            </summary>
            <param name="runtime">The runtime associated with the orchestration.</param>
            <param name="topic">The unique identifier for the orchestration session.</param>
            <param name="input">The input to be transformed and processed.</param>
            <param name="entryAgent">The initial agent type used for starting the orchestration.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2.RegisterOrchestrationAsync(Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationContext,Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration{`0,`1}.RegistrationContext,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Orchestration specific registration, including members and returns an optional entry agent.
            </summary>
            <param name="runtime">The runtime targeted for registration.</param>
            <param name="context">The orchestration context.</param>
            <param name="registrar">A registration context.</param>
            <param name="logger">The logger to use during registration</param>
            <returns>The entry AgentType for the orchestration, if any.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2.FormatAgentType(Microsoft.SemanticKernel.Agents.Runtime.TopicId,System.String)">
            <summary>
            Formats and returns a unique AgentType based on the provided topic and suffix.
            </summary>
            <param name="topic">The topic identifier used in formatting the agent type.</param>
            <param name="suffix">A suffix to differentiate the agent type.</param>
            <returns>A formatted AgentType object.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2.RegisterAsync(Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationContext,System.Threading.Tasks.TaskCompletionSource{`1},System.Nullable{Microsoft.SemanticKernel.Agents.Runtime.AgentType})">
            <summary>
            Registers the orchestration's root and boot agents, setting up completion and target routing.
            </summary>
            <param name="runtime">The runtime targeted for registration.</param>
            <param name="context">The orchestration context.</param>
            <param name="completion">A TaskCompletionSource for the orchestration.</param>
            <param name="handoff">The actor type used for handoff.  Only defined for nested orchestrations.</param>
            <returns>The AgentType representing the orchestration entry point.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2.RegistrationContext">
            <summary>
            A context used during registration (<see cref="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2.RegisterAsync(Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationContext,System.Threading.Tasks.TaskCompletionSource{`1},System.Nullable{Microsoft.SemanticKernel.Agents.Runtime.AgentType})"/>).
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2.RegistrationContext.#ctor(Microsoft.SemanticKernel.Agents.Runtime.AgentType,Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationContext,System.Threading.Tasks.TaskCompletionSource{`1},Microsoft.SemanticKernel.Agents.Orchestration.Transforms.OrchestrationOutputTransform{`1})">
            <summary>
            A context used during registration (<see cref="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2.RegisterAsync(Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationContext,System.Threading.Tasks.TaskCompletionSource{`1},System.Nullable{Microsoft.SemanticKernel.Agents.Runtime.AgentType})"/>).
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2.RegistrationContext.RegisterResultTypeAsync``1(Microsoft.SemanticKernel.Agents.Orchestration.Transforms.OrchestrationResultTransform{``0})">
            <summary>
            Register the final result type.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2.RequestActor">
            <summary>
            Actor responsible for receiving final message and transforming it into the output type.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2.RequestActor.#ctor(Microsoft.SemanticKernel.Agents.Runtime.AgentId,Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationContext,Microsoft.SemanticKernel.Agents.Orchestration.Transforms.OrchestrationInputTransform{`0},System.Threading.Tasks.TaskCompletionSource{`1},System.Func{System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent},System.Threading.Tasks.ValueTask},Microsoft.Extensions.Logging.ILogger{Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration{`0,`1}.RequestActor})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2"/> class.
            </summary>
            <param name="id">The unique identifier of the agent.</param>
            <param name="runtime">The runtime associated with the agent.</param>
            <param name="context">The orchestration context.</param>
            <param name="transform">A function that transforms an input of type TInput into a source type TSource.</param>
            <param name="completionSource">Optional TaskCompletionSource to signal orchestration completion.</param>
            <param name="action">An asynchronous function that processes the resulting source.</param>
            <param name="logger">The logger to use for the actor</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2.RequestActor.HandleAsync(`0,Microsoft.SemanticKernel.Agents.Runtime.MessageContext)">
            <summary>
            Handles the incoming message by transforming the input and executing the corresponding action asynchronously.
            </summary>
            <param name="item">The input message of type TInput.</param>
            <param name="messageContext">The context of the message, providing additional details.</param>
            <returns>A ValueTask representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2.ResultActor`1">
            <summary>
            Actor responsible for receiving the resultant message, transforming it, and handling further orchestration.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2.ResultActor`1.#ctor(Microsoft.SemanticKernel.Agents.Runtime.AgentId,Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationContext,Microsoft.SemanticKernel.Agents.Orchestration.Transforms.OrchestrationResultTransform{`2},Microsoft.SemanticKernel.Agents.Orchestration.Transforms.OrchestrationOutputTransform{`1},System.Threading.Tasks.TaskCompletionSource{`1},Microsoft.Extensions.Logging.ILogger{Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration{`0,`1}.ResultActor{`2}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2.ResultActor`1"/> class.
            </summary>
            <param name="id">The unique identifier of the agent.</param>
            <param name="runtime">The runtime associated with the agent.</param>
            <param name="context">The orchestration context.</param>
            <param name="transformResult">A delegate that transforms a TResult instance into a ChatMessageContent.</param>
            <param name="transformOutput">A delegate that transforms a ChatMessageContent into a TOutput instance.</param>
            <param name="completionSource">Optional TaskCompletionSource to signal orchestration completion.</param>
            <param name="logger">The logger to use for the actor</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2.ResultActor`1.HandleAsync(`2,Microsoft.SemanticKernel.Agents.Runtime.MessageContext)">
            <summary>
            Processes the received TResult message by transforming it into a TOutput message.
            If a CompletionTarget is defined, it sends the transformed message to the corresponding agent.
            Additionally, it signals completion via the provided TaskCompletionSource if available.
            </summary>
            <param name="item">The result item to process.</param>
            <param name="messageContext">The context associated with the message.</param>
            <returns>A ValueTask representing asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentActor">
            <summary>
            An <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.AgentActor"/> used with the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentOrchestration`2"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentActor.#ctor(Microsoft.SemanticKernel.Agents.Runtime.AgentId,Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationContext,Microsoft.SemanticKernel.Agents.Agent,Microsoft.SemanticKernel.Agents.Runtime.AgentType,Microsoft.Extensions.Logging.ILogger{Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentActor})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentActor"/> class.
            </summary>
            <param name="id">The unique identifier of the agent.</param>
            <param name="runtime">The runtime associated with the agent.</param>
            <param name="context">The orchestration context.</param>
            <param name="agent">An <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/>.</param>
            <param name="resultActor">Identifies the actor collecting results.</param>
            <param name="logger">The logger to use for the actor</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentActor.HandleAsync(Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentMessages.Request,Microsoft.SemanticKernel.Agents.Runtime.MessageContext)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentMessages">
            <summary>
            Common messages used by the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentOrchestration`2"/>.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentMessages.Empty">
            <summary>
            An empty message instance as a default.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentMessages.Request">
            <summary>
            The input task for a <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentOrchestration`2"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentMessages.Request.Messages">
            <summary>
            The request input.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentMessages.Result">
            <summary>
            A result from a <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentOrchestration`2"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentMessages.Result.Message">
            <summary>
            The result message.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentMessages.AsResultMessage(System.String,System.Nullable{Microsoft.SemanticKernel.ChatCompletion.AuthorRole})">
            <summary>
            Extension method to convert a <see cref="T:System.String"/> to a <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentMessages.Result"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentMessages.AsResultMessage(Microsoft.SemanticKernel.ChatMessageContent)">
            <summary>
            Extension method to convert a <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> to a <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentMessages.Result"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentMessages.AsInputMessage(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent})">
            <summary>
            Extension method to convert a collection of <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> to a <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentMessages.Request"/>.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentOrchestration`2">
            <summary>
            An orchestration that broadcasts the input message to each agent.
            </summary>
            <remarks>
            <c>TOutput</c> must be an array type for <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentOrchestration"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentOrchestration`2.#ctor(Microsoft.SemanticKernel.Agents.Agent[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentOrchestration`2"/> class.
            </summary>
            <param name="agents">The agents participating in the orchestration.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentOrchestration`2.StartAsync(Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,Microsoft.SemanticKernel.Agents.Runtime.TopicId,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent},System.Nullable{Microsoft.SemanticKernel.Agents.Runtime.AgentType})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentOrchestration`2.RegisterOrchestrationAsync(Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationContext,Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration{`0,`1}.RegistrationContext,Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentOrchestration">
            <summary>
            An orchestration that broadcasts the input message to each agent.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentOrchestration.#ctor(Microsoft.SemanticKernel.Agents.Agent[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentOrchestration"/> class.
            </summary>
            <param name="members">The agents to be orchestrated.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentResultActor">
            <summary>
            Actor for capturing each <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentMessages.Result"/> message.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentResultActor.#ctor(Microsoft.SemanticKernel.Agents.Runtime.AgentId,Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationContext,Microsoft.SemanticKernel.Agents.Runtime.AgentType,System.Int32,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentResultActor"/> class.
            </summary>
            <param name="id">The unique identifier of the agent.</param>
            <param name="runtime">The runtime associated with the agent.</param>
            <param name="context">The orchestration context.</param>
            <param name="orchestrationType">Identifies the orchestration agent.</param>
            <param name="expectedCount">The expected number of messages to be received.</param>
            <param name="logger">The logger to use for the actor</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentResultActor.HandleAsync(Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentMessages.Result,Microsoft.SemanticKernel.Agents.Runtime.MessageContext)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Extensions.RuntimeExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Extensions.RuntimeExtensions.SendMessageAsync(Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,System.Object,Microsoft.SemanticKernel.Agents.Runtime.AgentType,System.Threading.CancellationToken)">
            <summary>
            Sends a message to the specified agent.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Extensions.RuntimeExtensions.SubscribeAsync(Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,System.String,Microsoft.SemanticKernel.Agents.Runtime.TopicId[])">
            <summary>
            Subscribes the specified agent type to the provided topics.
            </summary>
            <param name="runtime">The runtime for managing the subscription.</param>
            <param name="agentType">The agent type to subscribe.</param>
            <param name="topics">A variable list of topics for subscription.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatAgentActor">
            <summary>
            An <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.AgentActor"/> used with the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatOrchestration`2"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatAgentActor.#ctor(Microsoft.SemanticKernel.Agents.Runtime.AgentId,Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationContext,Microsoft.SemanticKernel.Agents.Agent,Microsoft.Extensions.Logging.ILogger{Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatAgentActor})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatAgentActor"/> class.
            </summary>
            <param name="id">The unique identifier of the agent.</param>
            <param name="runtime">The runtime associated with the agent.</param>
            <param name="context">The orchestration context.</param>
            <param name="agent">An <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/>.</param>
            <param name="logger">The logger to use for the actor</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatAgentActor.HandleAsync(Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatMessages.Group,Microsoft.SemanticKernel.Agents.Runtime.MessageContext)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatAgentActor.HandleAsync(Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatMessages.Reset,Microsoft.SemanticKernel.Agents.Runtime.MessageContext)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatAgentActor.HandleAsync(Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatMessages.Speak,Microsoft.SemanticKernel.Agents.Runtime.MessageContext)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManagerResult`1">
            <summary>
            Represents the result of a group chat manager operation, including a value and a reason.
            </summary>
            <typeparam name="TValue">The type of the value returned by the operation.</typeparam>
            <param name="value">The value returned by the operation.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManagerResult`1.#ctor(`0)">
            <summary>
            Represents the result of a group chat manager operation, including a value and a reason.
            </summary>
            <typeparam name="TValue">The type of the value returned by the operation.</typeparam>
            <param name="value">The value returned by the operation.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManagerResult`1.Reason">
            <summary>
            The reason for the result, providing additional context or explanation.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManagerResult`1.Value">
            <summary>
            The value returned by the group chat manager operation.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManager">
            <summary>
            A manager that manages the flow of a group chat.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManager"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManager.InvocationCount">
            <summary>
            Gets the number of times the group chat manager has been invoked.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManager.MaximumInvocationCount">
            <summary>
            Gets or sets the maximum number of invocations allowed for the group chat manager.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManager.InteractiveCallback">
            <summary>
            Gets or sets the callback to be invoked for interactive input.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManager.FilterResults(Microsoft.SemanticKernel.ChatCompletion.ChatHistory,System.Threading.CancellationToken)">
            <summary>
            Filters the results of the group chat based on the provided chat history.
            </summary>
            <param name="history">The chat history to filter.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the operation.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManagerResult`1"/> containing the filtered result as a string.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManager.SelectNextAgent(Microsoft.SemanticKernel.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatTeam,System.Threading.CancellationToken)">
            <summary>
            Selects the next agent to participate in the group chat based on the provided chat history and team.
            </summary>
            <param name="history">The chat history to consider.</param>
            <param name="team">The group of agents participating in the chat.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the operation.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManagerResult`1"/> containing the identifier of the next agent as a string.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManager.ShouldRequestUserInput(Microsoft.SemanticKernel.ChatCompletion.ChatHistory,System.Threading.CancellationToken)">
            <summary>
            Determines whether user input should be requested based on the provided chat history.
            </summary>
            <param name="history">The chat history to consider.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the operation.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManagerResult`1"/> indicating whether user input should be requested.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManager.ShouldTerminate(Microsoft.SemanticKernel.ChatCompletion.ChatHistory,System.Threading.CancellationToken)">
            <summary>
            Determines whether the group chat should be terminated based on the provided chat history and invocation count.
            </summary>
            <param name="history">The chat history to consider.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the operation.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManagerResult`1"/> indicating whether the chat should be terminated.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManagerActor">
            <summary>
            An <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationActor"/> used to manage a <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatOrchestration`2"/>.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManagerActor.DefaultDescription">
            <summary>
            A common description for the manager.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManagerActor.#ctor(Microsoft.SemanticKernel.Agents.Runtime.AgentId,Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationContext,Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManager,Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatTeam,Microsoft.SemanticKernel.Agents.Runtime.AgentType,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManagerActor"/> class.
            </summary>
            <param name="id">The unique identifier of the agent.</param>
            <param name="runtime">The runtime associated with the agent.</param>
            <param name="context">The orchestration context.</param>
            <param name="manager">The manages the flow of the group-chat.</param>
            <param name="team">The team of agents being orchestrated</param>
            <param name="orchestrationType">Identifies the orchestration agent.</param>
            <param name="logger">The logger to use for the actor</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManagerActor.HandleAsync(Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatMessages.InputTask,Microsoft.SemanticKernel.Agents.Runtime.MessageContext)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManagerActor.HandleAsync(Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatMessages.Group,Microsoft.SemanticKernel.Agents.Runtime.MessageContext)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatMessages">
            <summary>
            Common messages used for agent chat patterns.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatMessages.Empty">
            <summary>
            An empty message instance as a default.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatMessages.Group">
            <summary>
            Broadcast a message to all <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatAgentActor"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatMessages.Group.Messages">
            <summary>
            The chat message being broadcast.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatMessages.Reset">
            <summary>
            Reset/clear the conversation history for all <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatAgentActor"/>.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatMessages.Result">
            <summary>
            The final result.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatMessages.Result.Message">
            <summary>
            The chat response message.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatMessages.Speak">
            <summary>
            Signal a <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatAgentActor"/> to respond.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatMessages.InputTask">
            <summary>
            The input task.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatMessages.InputTask.None">
            <summary>
            A task that does not require any action.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatMessages.InputTask.Messages">
            <summary>
            The input that defines the task goal.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatMessages.AsGroupMessage(Microsoft.SemanticKernel.ChatMessageContent)">
            <summary>
            Extension method to convert a <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> to a <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatMessages.Group"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatMessages.AsGroupMessage(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent})">
            <summary>
            Extension method to convert a <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> to a <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatMessages.Group"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatMessages.AsInputTaskMessage(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent})">
            <summary>
            Extension method to convert a <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> to a <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatMessages.Result"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatMessages.AsResultMessage(System.String)">
            <summary>
            Extension method to convert a <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> to a <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatMessages.Result"/>.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatOrchestration`2">
            <summary>
            An orchestration that coordinates a group-chat.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatOrchestration`2.#ctor(Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManager,Microsoft.SemanticKernel.Agents.Agent[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatOrchestration`2"/> class.
            </summary>
            <param name="manager">The manages the flow of the group-chat.</param>
            <param name="agents">The agents participating in the orchestration.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatOrchestration`2.StartAsync(Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,Microsoft.SemanticKernel.Agents.Runtime.TopicId,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent},System.Nullable{Microsoft.SemanticKernel.Agents.Runtime.AgentType})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatOrchestration`2.RegisterOrchestrationAsync(Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationContext,Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration{`0,`1}.RegistrationContext,Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatOrchestration">
            <summary>
            An orchestration that broadcasts the input message to each agent.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatOrchestration.#ctor(Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManager,Microsoft.SemanticKernel.Agents.Agent[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatOrchestration"/> class.
            </summary>
            <param name="manager">The manages the flow of the group-chat.</param>
            <param name="members">The agents to be orchestrated.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatTeam">
            <summary>
            Describes a team of agents participating in a group chat.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.ChatGroupExtensions">
            <summary>
            Extensions for <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatTeam"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.ChatGroupExtensions.FormatNames(Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatTeam)">
            <summary>
            Format the names of the agents in the team as a comma delimimted list.
            </summary>
            <param name="team">The agent team</param>
            <returns>A comma delimimted list of agent name.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.ChatGroupExtensions.FormatList(Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatTeam)">
            <summary>
            Format the names and descriptions of the agents in the team as a markdown list.
            </summary>
            <param name="team">The agent team</param>
            <returns>A markdown list of agent names and descriptions.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.RoundRobinGroupChatManager">
            <summary>
            A <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatManager"/> that selects agents in a round-robin fashion.
            </summary>
            <remarks>
            Subclass this class to customize filter and user interaction behavior.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.RoundRobinGroupChatManager.FilterResults(Microsoft.SemanticKernel.ChatCompletion.ChatHistory,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.RoundRobinGroupChatManager.SelectNextAgent(Microsoft.SemanticKernel.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatTeam,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.RoundRobinGroupChatManager.ShouldRequestUserInput(Microsoft.SemanticKernel.ChatCompletion.ChatHistory,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffActor">
            <summary>
            An actor used with the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffOrchestration`2"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffActor.#ctor(Microsoft.SemanticKernel.Agents.Runtime.AgentId,Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationContext,Microsoft.SemanticKernel.Agents.Agent,Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffLookup,Microsoft.SemanticKernel.Agents.Runtime.AgentType,Microsoft.Extensions.Logging.ILogger{Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffActor})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffActor"/> class.
            </summary>
            <param name="id">The unique identifier of the agent.</param>
            <param name="runtime">The runtime associated with the agent.</param>
            <param name="context">The orchestration context.</param>
            <param name="agent">An <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/>.</param>
            <param name="handoffs">The handoffs available to this agent</param>
            <param name="resultHandoff">The handoff agent for capturing the result.</param>
            <param name="logger">The logger to use for the actor</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffActor.InteractiveCallback">
            <summary>
            Gets or sets the callback to be invoked for interactive input.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffActor.ResponseCallbackFilter(Microsoft.SemanticKernel.ChatMessageContent)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffActor.CreateInvokeOptions">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffActor.HandleAsync(Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffMessages.InputTask,Microsoft.SemanticKernel.Agents.Runtime.MessageContext)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffActor.HandleAsync(Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffMessages.Response,Microsoft.SemanticKernel.Agents.Runtime.MessageContext)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffActor.HandleAsync(Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffMessages.Request,Microsoft.SemanticKernel.Agents.Runtime.MessageContext)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffMessages">
            <summary>
            A message that describes the input task and captures results for a <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffOrchestration`2"/>.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffMessages.Empty">
            <summary>
            An empty message instance as a default.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffMessages.InputTask">
            <summary>
            The input message.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffMessages.InputTask.Messages">
            <summary>
            The orchestration input messages.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffMessages.Result">
            <summary>
            The final result.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffMessages.Result.Message">
            <summary>
            The orchestration result message.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffMessages.Request">
            <summary>
            Signals the handoff to another agent.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffMessages.Response">
            <summary>
            Broadcast an agent response to all actors in the orchestration.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffMessages.Response.Message">
            <summary>
            The chat response message.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffMessages.AsInputTaskMessage(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent})">
            <summary>
            Extension method to convert a <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> to a <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffMessages.Result"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffMessages.AsResultMessage(Microsoft.SemanticKernel.ChatMessageContent)">
            <summary>
            Extension method to convert a <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> to a <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffMessages.Result"/>.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffOrchestration`2">
            <summary>
            An orchestration that provides the input message to the first agent
            and Handoffly passes each agent result to the next agent.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffOrchestration`2.#ctor(Microsoft.SemanticKernel.Agents.Orchestration.Handoff.OrchestrationHandoffs,Microsoft.SemanticKernel.Agents.Agent[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffOrchestration`2"/> class.
            </summary>
            <param name="handoffs">Defines the handoff connections for each agent.</param>
            <param name="agents">The agents participating in the orchestration.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffOrchestration`2.InteractiveCallback">
            <summary>
            Gets or sets the callback to be invoked for interactive input.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffOrchestration`2.StartAsync(Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,Microsoft.SemanticKernel.Agents.Runtime.TopicId,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent},System.Nullable{Microsoft.SemanticKernel.Agents.Runtime.AgentType})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffOrchestration`2.RegisterOrchestrationAsync(Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationContext,Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration{`0,`1}.RegistrationContext,Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffOrchestration">
            <summary>
            An orchestration that passes the input message to the first agent, and
            then the subsequent result to the next agent, etc...
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffOrchestration.#ctor(Microsoft.SemanticKernel.Agents.Orchestration.Handoff.OrchestrationHandoffs,Microsoft.SemanticKernel.Agents.Agent[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffOrchestration"/> class.
            </summary>
            <param name="handoffs">Defines the handoff connections for each agent.</param>
            <param name="members">The agents to be orchestrated.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.AgentHandoffs">
            <summary>
            Defines the handoff relationships for a given agent.
            Maps target agent names/IDs to handoff descriptions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.AgentHandoffs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.AgentHandoffs"/> class with no handoff relationships.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.AgentHandoffs.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.AgentHandoffs"/> class with the specified handoff relationships.
            </summary>
            <param name="handoffs">A dictionary mapping target agent names/IDs to handoff descriptions.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.OrchestrationHandoffs">
            <summary>
            Defines the orchestration handoff relationships for all agents in the system.
            Maps source agent names/IDs to their <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.AgentHandoffs"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.OrchestrationHandoffs.#ctor(Microsoft.SemanticKernel.Agents.Agent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.OrchestrationHandoffs"/> class with no handoff relationships.
            </summary>
            <param name="firstAgent">The first agent to be invoked (prior to any handoff).</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.OrchestrationHandoffs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.OrchestrationHandoffs"/> class with no handoff relationships.
            </summary>
            <param name="firstAgentName">The name of the first agent to be invoked (prior to any handoff).</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.OrchestrationHandoffs.FirstAgentName">
            <summary>
            The name of the first agent to be invoked (prior to any handoff).
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.OrchestrationHandoffs.StartWith(Microsoft.SemanticKernel.Agents.Agent)">
            <summary>
            Adds handoff relationships from a source agent to one or more target agents.
            Each target agent's name or ID is mapped to its description.
            </summary>
            <param name="source">The source agent.</param>
            <returns>The updated <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.OrchestrationHandoffs"/> instance.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.OrchestrationHandoffsExtensions">
            <summary>
            Extension methods for building and modifying <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.OrchestrationHandoffs"/> relationships.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.OrchestrationHandoffsExtensions.Add(Microsoft.SemanticKernel.Agents.Orchestration.Handoff.OrchestrationHandoffs,Microsoft.SemanticKernel.Agents.Agent,Microsoft.SemanticKernel.Agents.Agent[])">
            <summary>
            Adds handoff relationships from a source agent to one or more target agents.
            Each target agent's name or ID is mapped to its description.
            </summary>
            <param name="handoffs">The orchestration handoffs collection to update.</param>
            <param name="source">The source agent.</param>
            <param name="targets">The target agents to add as handoff targets for the source agent.</param>
            <returns>The updated <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.OrchestrationHandoffs"/> instance.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.OrchestrationHandoffsExtensions.Add(Microsoft.SemanticKernel.Agents.Orchestration.Handoff.OrchestrationHandoffs,Microsoft.SemanticKernel.Agents.Agent,Microsoft.SemanticKernel.Agents.Agent,System.String)">
            <summary>
            Adds a handoff relationship from a source agent to a target agent with a custom description.
            </summary>
            <param name="handoffs">The orchestration handoffs collection to update.</param>
            <param name="source">The source agent.</param>
            <param name="target">The target agent.</param>
            <param name="description">The handoff description.</param>
            <returns>The updated <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.OrchestrationHandoffs"/> instance.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.OrchestrationHandoffsExtensions.Add(Microsoft.SemanticKernel.Agents.Orchestration.Handoff.OrchestrationHandoffs,Microsoft.SemanticKernel.Agents.Agent,System.String,System.String)">
            <summary>
            Adds a handoff relationship from a source agent to a target agent name/ID with a custom description.
            </summary>
            <param name="handoffs">The orchestration handoffs collection to update.</param>
            <param name="source">The source agent.</param>
            <param name="targetName">The target agent's name or ID.</param>
            <param name="description">The handoff description.</param>
            <returns>The updated <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.OrchestrationHandoffs"/> instance.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.OrchestrationHandoffsExtensions.Add(Microsoft.SemanticKernel.Agents.Orchestration.Handoff.OrchestrationHandoffs,System.String,System.String,System.String)">
            <summary>
            Adds a handoff relationship from a source agent name/ID to a target agent name/ID with a custom description.
            </summary>
            <param name="handoffs">The orchestration handoffs collection to update.</param>
            <param name="sourceName">The source agent's name or ID.</param>
            <param name="targetName">The target agent's name or ID.</param>
            <param name="description">The handoff description.</param>
            <returns>The updated <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.OrchestrationHandoffs"/> instance.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffLookup">
            <summary>
            Handoff relationships post-processed into a name-based lookup table that includes the agent type and handoff description.
            Maps agent names/IDs to a tuple of <see cref="T:Microsoft.SemanticKernel.Agents.Runtime.AgentType"/> and handoff description.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestrationLogMessages">
            <summary>
            Extensions for logging <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration`2"/>.
            </summary>
            <remarks>
            This extension uses the <see cref="T:Microsoft.Extensions.Logging.LoggerMessageAttribute"/> to
            generate logging code at compile time to achieve optimized code.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestrationLogMessages.LogOrchestrationRegistrationStart(Microsoft.Extensions.Logging.ILogger,System.String,Microsoft.SemanticKernel.Agents.Runtime.TopicId)">
            <summary>
            Logs the start of the registration phase for an orchestration.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestrationLogMessages.LogRegisterActor(Microsoft.Extensions.Logging.ILogger,System.String,Microsoft.SemanticKernel.Agents.Runtime.AgentType,System.String)">
            <summary>
            Logs pattern actor registration.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestrationLogMessages.LogRegisterActor(Microsoft.Extensions.Logging.ILogger,System.String,Microsoft.SemanticKernel.Agents.Runtime.AgentType,System.String,System.Int32)">
            <summary>
            Logs agent actor registration.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestrationLogMessages.LogOrchestrationRegistrationDone(Microsoft.Extensions.Logging.ILogger,System.String,Microsoft.SemanticKernel.Agents.Runtime.TopicId)">
            <summary>
            Logs the end of the registration phase for an orchestration.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestrationLogMessages.LogOrchestrationInvoke(Microsoft.Extensions.Logging.ILogger,System.String,Microsoft.SemanticKernel.Agents.Runtime.TopicId)">
            <summary>
            Logs an orchestration invocation
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestrationLogMessages.LogOrchestrationYield(Microsoft.Extensions.Logging.ILogger,System.String,Microsoft.SemanticKernel.Agents.Runtime.TopicId)">
            <summary>
            Logs that the orchestration has started successfully and
            yielded control back to the caller.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestrationLogMessages.LogOrchestrationStart(Microsoft.Extensions.Logging.ILogger,System.String,Microsoft.SemanticKernel.Agents.Runtime.AgentId)">
            <summary>
            Logs the start an orchestration (top/outer).
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestrationLogMessages.LogOrchestrationRequestInvoke(Microsoft.Extensions.Logging.ILogger,System.String,Microsoft.SemanticKernel.Agents.Runtime.AgentId)">
            <summary>
            Logs that orchestration request actor is active
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestrationLogMessages.LogOrchestrationRequestFailure(Microsoft.Extensions.Logging.ILogger,System.String,Microsoft.SemanticKernel.Agents.Runtime.AgentId,System.Exception)">
            <summary>
            Logs that orchestration request actor experienced an unexpected failure.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestrationLogMessages.LogOrchestrationResultInvoke(Microsoft.Extensions.Logging.ILogger,System.String,Microsoft.SemanticKernel.Agents.Runtime.AgentId)">
            <summary>
            Logs that orchestration result actor is active
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestrationLogMessages.LogOrchestrationResultFailure(Microsoft.Extensions.Logging.ILogger,System.String,Microsoft.SemanticKernel.Agents.Runtime.AgentId,System.Exception)">
            <summary>
            Logs that orchestration result actor experienced an unexpected failure.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestrationLogMessages.__LogRegisterActorStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestrationLogMessages.__LogRegisterActor1Struct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.ConcurrentOrchestrationLogMessages">
            <summary>
            Extensions for logging <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Concurrent.ConcurrentOrchestration`2"/>.
            </summary>
            <remarks>
            This extension uses the <see cref="T:Microsoft.Extensions.Logging.LoggerMessageAttribute"/> to
            generate logging code at compile time to achieve optimized code.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.ConcurrentOrchestrationLogMessages.LogConcurrentResultCapture(Microsoft.Extensions.Logging.ILogger,Microsoft.SemanticKernel.Agents.Runtime.AgentId,System.Int32,System.Int32)">
            <summary>
            Logs result capture.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChatOrchestrationLogMessages">
            <summary>
            Extensions for logging <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChat.GroupChatOrchestration`2"/>.
            </summary>
            <remarks>
            This extension uses the <see cref="T:Microsoft.Extensions.Logging.LoggerMessageAttribute"/> to
            generate logging code at compile time to achieve optimized code.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.GroupChatOrchestrationLogMessages.__LogChatManagerSelectStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.HandoffOrchestrationLogMessages">
            <summary>
            Extensions for logging <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Handoff.HandoffOrchestration`2"/>.
            </summary>
            <remarks>
            This extension uses the <see cref="T:Microsoft.Extensions.Logging.LoggerMessageAttribute"/> to
            generate logging code at compile time to achieve optimized code.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationResultLogMessages">
            <summary>
            Extensions for logging <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationResult`1"/>.
            </summary>
            <remarks>
            This extension uses the <see cref="T:Microsoft.Extensions.Logging.LoggerMessageAttribute"/> to
            generate logging code at compile time to achieve optimized code.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationResultLogMessages.LogOrchestrationResultAwait(Microsoft.Extensions.Logging.ILogger,System.String,Microsoft.SemanticKernel.Agents.Runtime.TopicId)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationResult`1"/> awaiting the orchestration.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationResultLogMessages.LogOrchestrationResultTimeout(Microsoft.Extensions.Logging.ILogger,System.String,Microsoft.SemanticKernel.Agents.Runtime.TopicId)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationResult`1"/> timeout while awaiting the orchestration.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationResultLogMessages.LogOrchestrationResultCancelled(Microsoft.Extensions.Logging.ILogger,System.String,Microsoft.SemanticKernel.Agents.Runtime.TopicId)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationResult`1"/> cancelled the orchestration.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationResultLogMessages.LogOrchestrationResultComplete(Microsoft.Extensions.Logging.ILogger,System.String,Microsoft.SemanticKernel.Agents.Runtime.TopicId)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationResult`1"/> the awaited the orchestration has completed.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.SequentialOrchestrationLogMessages">
            <summary>
            Extensions for logging <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialOrchestration`2"/>.
            </summary>
            <remarks>
            This extension uses the <see cref="T:Microsoft.Extensions.Logging.LoggerMessageAttribute"/> to
            generate logging code at compile time to achieve optimized code.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationActor">
            <summary>
            Base abstractions for any actor that participates in an orchestration.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationActor.#ctor(Microsoft.SemanticKernel.Agents.Runtime.AgentId,Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationContext,System.String,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationActor"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationActor.Context">
            <summary>
            The orchestration context.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationActor.SendMessageAsync(System.Object,Microsoft.SemanticKernel.Agents.Runtime.AgentType,System.Threading.CancellationToken)">
            <summary>
            Sends a message to a specified recipient agent-type through the runtime.
            </summary>
            <param name="message">The message object to send.</param>
            <param name="agentType">The recipient agent's type.</param>
            <param name="cancellationToken">A token used to cancel the operation if needed.</param>
            <returns>The agent identifier, if it exists.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationContext">
            <summary>
            Provides contextual information for an orchestration operation, including topic, cancellation, logging, and response callback.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationContext.Orchestration">
            <summary>
            Gets the name or identifier of the orchestration.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationContext.Topic">
            <summary>
            Gets the identifier associated with orchestration topic.
            </summary>
            <remarks>
            All orchestration actors are subscribed to this topic.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationContext.Cancellation">
            <summary>
            Gets the cancellation token that can be used to observe cancellation requests for the orchestration.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationContext.LoggerFactory">
            <summary>
            Gets the associated logger factory for creating loggers within the orchestration context.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationContext.ResponseCallback">
            <summary>
            Optional callback that is invoked for every agent response.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationResult`1">
            <summary>
            Represents the result of an orchestration operation that yields a value of type <typeparamref name="TValue"/>.
            This class encapsulates the asynchronous completion of an orchestration process.
            </summary>
            <typeparam name="TValue">The type of the value produced by the orchestration.</typeparam>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationResult`1.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationResult`1"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationResult`1.Orchestration">
            <summary>
            Gets the orchestration name associated with this orchestration result.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationResult`1.Topic">
            <summary>
            Gets the topic identifier associated with this orchestration result.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationResult`1.GetValueAsync(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves the orchestration result value.
            If a timeout is specified, the method will throw a <see cref="T:System.TimeoutException"/>
            if the orchestration does not complete within the allotted time.
            </summary>
            <param name="timeout">An optional <see cref="T:System.TimeSpan"/> representing the maximum wait duration.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> representing the result of the orchestration.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the orchestration does not complete within the specified timeout period.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationResult`1.Cancel">
            <summary>
            Cancel the orchestration associated with this result.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
            <remarks>
            Cancellation is not expected to immediately halt the orchestration.  Messages that
            are already in-flight may still be processed.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialActor">
            <summary>
            An actor used with the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialOrchestration`2"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialActor.#ctor(Microsoft.SemanticKernel.Agents.Runtime.AgentId,Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationContext,Microsoft.SemanticKernel.Agents.Agent,Microsoft.SemanticKernel.Agents.Runtime.AgentType,Microsoft.Extensions.Logging.ILogger{Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialActor})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialActor"/> class.
            </summary>
            <param name="id">The unique identifier of the agent.</param>
            <param name="runtime">The runtime associated with the agent.</param>
            <param name="context">The orchestration context.</param>
            <param name="agent">An <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/>.</param>
            <param name="nextAgent">The identifier of the next agent for which to handoff the result</param>
            <param name="logger">The logger to use for the actor</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialActor.HandleAsync(Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialMessages.Request,Microsoft.SemanticKernel.Agents.Runtime.MessageContext)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialActor.HandleAsync(Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialMessages.Response,Microsoft.SemanticKernel.Agents.Runtime.MessageContext)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialMessages">
            <summary>
            A message that describes the input task and captures results for a <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialOrchestration`2"/>.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialMessages.Empty">
            <summary>
            An empty message instance as a default.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialMessages.Request">
            <summary>
            Represents a request containing a sequence of chat messages to be processed by the sequential orchestration.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialMessages.Request.Messages">
            <summary>
            The request input.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialMessages.Response">
            <summary>
            Represents a response containing the result message from the sequential orchestration.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialMessages.Response.Message">
            <summary>
            The response message.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialMessages.AsRequestMessage(Microsoft.SemanticKernel.ChatMessageContent)">
            <summary>
            Extension method to convert a <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> to a <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialMessages.Request"/>.
            </summary>
            <param name="message">The chat message to include in the request.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialMessages.Request"/> containing the provided messages.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialMessages.AsRequestMessage(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent})">
            <summary>
            Extension method to convert a collection of <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> to a <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialMessages.Request"/>.
            </summary>
            <param name="messages">The collection of chat messages to include in the request.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialMessages.Request"/> containing the provided messages.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialMessages.AsResponseMessage(Microsoft.SemanticKernel.ChatMessageContent)">
            <summary>
            Extension method to convert a <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> to a <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialMessages.Response"/>.
            </summary>
            <param name="message">The chat message to include in the response.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialMessages.Response"/> containing the provided message.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialOrchestration`2">
            <summary>
            An orchestration that provides the input message to the first agent
            and sequentially passes each agent result to the next agent.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialOrchestration`2.#ctor(Microsoft.SemanticKernel.Agents.Agent[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialOrchestration`2"/> class.
            </summary>
            <param name="agents">The agents participating in the orchestration.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialOrchestration`2.StartAsync(Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,Microsoft.SemanticKernel.Agents.Runtime.TopicId,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent},System.Nullable{Microsoft.SemanticKernel.Agents.Runtime.AgentType})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialOrchestration`2.RegisterOrchestrationAsync(Microsoft.SemanticKernel.Agents.Runtime.IAgentRuntime,Microsoft.SemanticKernel.Agents.Orchestration.OrchestrationContext,Microsoft.SemanticKernel.Agents.Orchestration.AgentOrchestration{`0,`1}.RegistrationContext,Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialOrchestration">
            <summary>
            An orchestration that passes the input message to the first agent, and
            then the subsequent result to the next agent, etc...
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialOrchestration.#ctor(Microsoft.SemanticKernel.Agents.Agent[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Sequential.SequentialOrchestration"/> class.
            </summary>
            <param name="members">The agents to be orchestrated.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Transforms.OrchestrationInputTransform`1">
            <summary>
            Delegate for transforming an input of type <typeparamref name="TInput"/> into a collection of <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/>.
            This is typically used to convert user or system input into a format suitable for chat orchestration.
            </summary>
            <param name="input">The input object to transform.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> containing an enumerable of <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> representing the transformed input.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Transforms.OrchestrationOutputTransform`1">
            <summary>
            Delegate for transforming a <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> into an output of type <typeparamref name="TOutput"/>.
            This is typically used to convert a chat response into a desired output format.
            </summary>
            <param name="result">The result messages to transform.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> containing the transformed output of type <typeparamref name="TOutput"/>.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Transforms.OrchestrationResultTransform`1">
            <summary>
            Delegate for transforming the internal result message for an orchestration into a <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/>.
            </summary>
            <typeparam name="TResult">The result message type</typeparam>
            <param name="result">The result messages</param>
            <returns>The orchestration result as a <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/>.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Orchestration.Transforms.StructuredOutputTransform`1">
            <summary>
            Populates the target result type  <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> into a structured output.
            </summary>
            <typeparam name="TOutput">The .NET type of the structured-output to deserialization target.</typeparam>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Transforms.StructuredOutputTransform`1.#ctor(Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService,Microsoft.SemanticKernel.PromptExecutionSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Orchestration.Transforms.StructuredOutputTransform`1"/> class.
            </summary>
            <param name="service">The chat completion service to use for generating responses.</param>
            <param name="executionSettings">The prompt execution settings to use for the chat completion service.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Orchestration.Transforms.StructuredOutputTransform`1.Instructions">
            <summary>
            Gets or sets the instructions to be used as the system message for the chat completion.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Orchestration.Transforms.StructuredOutputTransform`1.TransformAsync(System.Collections.Generic.IList{Microsoft.SemanticKernel.ChatMessageContent},System.Threading.CancellationToken)">
            <summary>
            Transforms the provided <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> into a strongly-typed structured output by invoking the chat completion service and deserializing the response.
            </summary>
            <param name="messages">The chat messages to process.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
            <returns>The structured output of type <typeparamref name="TOutput"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the response cannot be deserialized into <typeparamref name="TOutput"/>.</exception>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Extensions.AgentExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Extensions.AgentExtensions.GetName(Microsoft.SemanticKernel.Agents.Agent)">
            <summary>
            Provides a name for the agent, even if it's the identifier.
            (since <see cref="P:Microsoft.SemanticKernel.Agents.Agent.Name"/> allows null)
            </summary>
            <param name="agent">The target agent</param>
            <returns>The agent name as a non-empty string</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Extensions.AgentExtensions.GetDisplayName(Microsoft.SemanticKernel.Agents.Agent)">
            <summary>
            Provides the display name of the agent.
            </summary>
            <param name="agent">The target agent</param>
            <remarks>
            Currently, it's intended for telemetry purposes only.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ActivityExtensions.StartActivityWithTags(System.Diagnostics.ActivitySource,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Diagnostics.ActivityKind)">
            <summary>
            Starts an activity with the specified name and tags.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ActivityExtensions.SetTags(System.Diagnostics.Activity,System.ReadOnlySpan{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Adds tags to the activity.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ActivityExtensions.AttachSensitiveDataAsEvent(System.Diagnostics.Activity,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Adds an event to the activity. Should only be used for events that contain sensitive data.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ActivityExtensions.SetError(System.Diagnostics.Activity,System.Exception)">
            <summary>
            Sets the error status and type on the activity.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics">
            <summary>
            Model diagnostics helper class that provides a set of methods to trace model activities with the OTel semantic conventions.
            This class contains experimental features and may change in the future.
            To enable these features, set one of the following switches to true:
                `Microsoft.SemanticKernel.Experimental.GenAI.EnableOTelDiagnostics`
                `Microsoft.SemanticKernel.Experimental.GenAI.EnableOTelDiagnosticsSensitive`
            Or set the following environment variables to true:
               `SEMANTICKERNEL_EXPERIMENTAL_GENAI_ENABLE_OTEL_DIAGNOSTICS`
               `SEMANTICKERNEL_EXPERIMENTAL_GENAI_ENABLE_OTEL_DIAGNOSTICS_SENSITIVE`
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.StartCompletionActivity``1(System.Uri,System.String,System.String,System.String,``0)">
            <summary>
            Start a text completion activity for a given model.
            The activity will be tagged with the a set of attributes specified by the semantic conventions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.StartCompletionActivity``1(System.Uri,System.String,System.String,Microsoft.SemanticKernel.ChatCompletion.ChatHistory,``0)">
            <summary>
            Start a chat completion activity for a given model.
            The activity will be tagged with the a set of attributes specified by the semantic conventions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.StartAgentInvocationActivity(System.String,System.String,System.String)">
            <summary>
            Start an agent invocation activity and return the activity.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetCompletionResponse(System.Diagnostics.Activity,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.TextContent},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Set the text completion response for a given activity.
            The activity will be enriched with the response attributes specified by the semantic conventions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetCompletionResponse(System.Diagnostics.Activity,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Set the chat completion response for a given activity.
            The activity will be enriched with the response attributes specified by the semantic conventions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.EndStreaming(System.Diagnostics.Activity,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.StreamingKernelContent},System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.FunctionCallContent},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Notify the end of streaming for a given activity.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetResponseId(System.Diagnostics.Activity,System.String)">
            <summary>
            Set the response id for a given activity.
            </summary>
            <param name="activity">The activity to set the response id</param>
            <param name="responseId">The response id</param>
            <returns>The activity with the response id set for chaining</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetInputTokensUsage(System.Diagnostics.Activity,System.Int32)">
            <summary>
            Set the input tokens usage for a given activity.
            </summary>
            <param name="activity">The activity to set the input tokens usage</param>
            <param name="inputTokens">The number of input tokens used</param>
            <returns>The activity with the input tokens usage set for chaining</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetOutputTokensUsage(System.Diagnostics.Activity,System.Int32)">
            <summary>
            Set the output tokens usage for a given activity.
            </summary>
            <param name="activity">The activity to set the output tokens usage</param>
            <param name="outputTokens">The number of output tokens used</param>
            <returns>The activity with the output tokens usage set for chaining</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.IsModelDiagnosticsEnabled">
            <summary>
            Check if model diagnostics is enabled
            Model diagnostics is enabled if either EnableModelDiagnostics or EnableSensitiveEvents is set to true and there are listeners.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.IsSensitiveEventsEnabled">
            <summary>
            Check if sensitive events are enabled.
            Sensitive events are enabled if EnableSensitiveEvents is set to true and there are listeners.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.ToGenAIConventionsFormat(Microsoft.SemanticKernel.ChatMessageContent,System.Text.StringBuilder)">
            <summary>
            Convert a chat message to a string aligned with the OTel GenAI Semantic Conventions format
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.ToGenAIConventionsFormat(Microsoft.SemanticKernel.ChatCompletion.ChatMessageContentItemCollection,System.Text.StringBuilder)">
            <summary>
            Helper method to convert tool calls to a string aligned with the OTel GenAI Semantic Conventions format
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.ToGenAIConventionsChoiceFormat(Microsoft.SemanticKernel.ChatMessageContent,System.Int32)">
            <summary>
            Convert a chat model response to a string aligned with the OTel GenAI Semantic Conventions format
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.ToGenAIConventionsChoiceFormat(Microsoft.SemanticKernel.TextContent,System.Int32)">
            <summary>
            Convert a text model response to a string aligned with the OTel GenAI Semantic Conventions format
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetCompletionResponse``1(System.Diagnostics.Activity,System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Func{``0,System.Int32,System.String})">
            <summary>
            Set the completion response for a given activity.
            The `formatCompletions` delegate won't be invoked if events are disabled.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetCompletionResponse(System.Diagnostics.Activity,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{Microsoft.SemanticKernel.StreamingKernelContent}},System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.FunctionCallContent},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Set the streaming completion response for a given activity.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.OrganizeStreamingContent(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.StreamingKernelContent})">
            <summary>
            Organize streaming content by choice index
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.ModelDiagnosticsTags">
            <summary>
            Tags used in model diagnostics
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelVerify.AsciiLettersDigitsUnderscoresRegex">
            <remarks>
            Pattern:<br/>
            <code>^[0-9A-Za-z_]*$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [0-9A-Z_a-z] atomically any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelVerify.ParametersUniqueness(System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.KernelParameterMetadata})">
            <summary>
            Make sure every function parameter name is unique
            </summary>
            <param name="parameters">List of parameters</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Throw">
            <summary>
            Defines static methods used to throw exceptions.
            </summary>
            <remarks>
            The main purpose is to reduce code size, improve performance, and standardize exception
            messages.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfNull``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified argument is <see langword="null"/>.
            </summary>
            <typeparam name="T">Argument type to be checked for <see langword="null"/>.</typeparam>
            <param name="argument">Object to be checked for <see langword="null"/>.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfNullOrMemberNull``2(``0,``1,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified argument is <see langword="null"/>,
            or <see cref="T:System.ArgumentException" /> if the specified member is <see langword="null"/>.
            </summary>
            <typeparam name="TParameter">Argument type to be checked for <see langword="null"/>.</typeparam>
            <typeparam name="TMember">Member type to be checked for <see langword="null"/>.</typeparam>
            <param name="argument">Argument to be checked for <see langword="null"/>.</param>
            <param name="member">Object member to be checked for <see langword="null"/>.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <param name="memberName">The name of the member.</param>
            <returns>The original value of <paramref name="member"/>.</returns>
            <example>
            <code language="csharp">
            Throws.IfNullOrMemberNull(myObject, myObject?.MyProperty)
            </code>
            </example>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfMemberNull``2(``0,``1,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> if the specified member is <see langword="null"/>.
            </summary>
            <typeparam name="TParameter">Argument type.</typeparam>
            <typeparam name="TMember">Member type to be checked for <see langword="null"/>.</typeparam>
            <param name="argument">Argument to which member belongs.</param>
            <param name="member">Object member to be checked for <see langword="null"/>.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <param name="memberName">The name of the member.</param>
            <returns>The original value of <paramref name="member"/>.</returns>
            <example>
            <code language="csharp">
            Throws.IfMemberNull(myObject, myObject.MyProperty)
            </code>
            </example>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfNullOrWhitespace(System.String,System.String)">
            <summary>
            Throws either an <see cref="T:System.ArgumentNullException"/> or an <see cref="T:System.ArgumentException"/>
            if the specified string is <see langword="null"/> or whitespace respectively.
            </summary>
            <param name="argument">String to be checked for <see langword="null"/> or whitespace.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the string is <see langword="null"/>,
            or <see cref="T:System.ArgumentException"/> if it is empty.
            </summary>
            <param name="argument">String to be checked for <see langword="null"/> or empty.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfBufferTooSmall(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if the argument's buffer size is less than the required buffer size.
            </summary>
            <param name="bufferSize">The actual buffer size.</param>
            <param name="requiredSize">The required buffer size.</param>
            <param name="paramName">The name of the parameter to be checked.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfOutOfRange``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the enum value is not valid.
            </summary>
            <param name="argument">The argument to evaluate.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the collection is <see langword="null"/>,
            or <see cref="T:System.ArgumentException"/> if it is empty.
            </summary>
            <param name="argument">The collection to evaluate.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <typeparam name="T">The type of objects in the collection.</typeparam>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentNullException(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentNullException(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentOutOfRangeException(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentOutOfRangeException(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentOutOfRangeException(System.String,System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="actualValue">The value of the argument that caused this exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentException(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentException(System.String,System.String,System.Exception)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <remarks>
            If the <paramref name="innerException"/> is not a <see langword="null"/>, the current exception is raised in a catch
            block that handles the inner exception.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.InvalidOperationException(System.String)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.InvalidOperationException(System.String,System.Exception)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThan(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>  if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThan(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThanOrEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThanOrEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfOutOfRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfZero(System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThan(System.UInt32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>  if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThan(System.UInt32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThanOrEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThanOrEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfOutOfRange(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfZero(System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThan(System.Int64,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>  if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThan(System.Int64,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThanOrEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThanOrEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfOutOfRange(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfZero(System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThan(System.UInt64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>  if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThan(System.UInt64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThanOrEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThanOrEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfOutOfRange(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfZero(System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThan(System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThan(System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThanOrEqual(System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThanOrEqual(System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfOutOfRange(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfZero(System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Verify.AsciiLettersDigitsUnderscoresRegex">
            <remarks>
            Pattern:<br/>
            <code>^[0-9A-Za-z_]*$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [0-9A-Z_a-z] atomically any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Verify.FilenameRegex">
            <remarks>
            Pattern:<br/>
            <code>^[^.]+\\.[^.]+$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character other than '.' atomically at least once.<br/>
            ○ Match '.'.<br/>
            ○ Match a character other than '.' greedily at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Verify.NotNull(System.Object,System.String)">
            <summary>
            Equivalent of ArgumentNullException.ThrowIfNull
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Verify.ValidHostnameSegment(System.String,System.String)">
            <summary>
            Validates that a hostname segment string is safe for use as a URL segment, preventing URL injection.
            </summary>
            <param name="hostNameSegment">The hostname segment string to validate (e.g., 'us-east1', 'europe-west4')</param>
            <param name="paramName">Optional parameter name for the exception</param>
            <exception cref="T:System.ArgumentException">Thrown when the location contains invalid characters or patterns</exception>
        </member>
        <member name="T:Microsoft.SemanticKernel.AppContextSwitchHelper">
            <summary>
            Helper class to get app context switch value
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AppContextSwitchHelper.GetConfigValue(System.String,System.String)">
            <summary>
            Returns the value of the specified app switch or environment variable if it is set.
            If the switch or environment variable is not set, return false.
            The app switch value takes precedence over the environment variable.
            </summary>
            <param name="appContextSwitchName">The name of the app switch.</param>
            <param name="envVarName">The name of the environment variable.</param>
            <returns>The value of the app switch or environment variable if it is set; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.IListExtensions.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a range of elements from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> source to the target <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="target">The target <see cref="T:System.Collections.Generic.IList`1"/> to add elements to.</param>
            <param name="source">The source <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing elements to add to the target <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.InternalTypeConverter">
            <summary>
            Provides internal utility methods for converting types to strings with consideration for CultureInfo.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.InternalTypeConverter.ConvertToString(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the given object value to a string representation using the appropriate CultureInfo.
            </summary>
            <param name="value">The object to convert.</param>
            <param name="culture">The CultureInfo to consider during conversion.</param>
            <returns>A string representation of the object value, considering the specified CultureInfo.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.InternalTypeConverter.GetTypeToStringConverterDelegate(System.Type)">
            <summary>
            Retrieves a type-to-string converter delegate for the specified source type.
            </summary>
            <param name="sourceType">The source Type for which to retrieve the type-to-string converter delegate.</param>
            <returns>A Func delegate for converting the source type to a string, considering CultureInfo, or null if no suitable converter is found.</returns>
        </member>
        <member name="F:Microsoft.SemanticKernel.InternalTypeConverter.s_converters">
            <summary>Converter functions for converting types to strings.</summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.NonNullCollection`1">
            <summary>
            Provides a collection of non-null items.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.NonNullCollection`1._items">
            <summary>
            The underlying list of items.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.NonNullCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.NonNullCollection`1"/> class.
            </summary>
            <param name="items">The initial collection of items to populate this collection.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.NonNullCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to get or set.</param>
            <returns>The item at the specified index.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index"/> was not valid for this collection.</exception>
        </member>
        <member name="P:Microsoft.SemanticKernel.NonNullCollection`1.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.Add(`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.Contains(`0)">
            <summary>
            Determines whether an item is in the collection.
            </summary>
            <param name="item">The item to locate.</param>
            <returns>True if the item is found in the collection; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all of the items in the collection to an array, starting at the specified destination array index.
            </summary>
            <param name="array">The destination array into which the items should be copied.</param>
            <param name="arrayIndex">The zero-based index into <paramref name="array"/> at which copying should begin.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The number of items in the collection is greater than the available space from <paramref name="arrayIndex"/> to the end of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.IndexOf(`0)">
            <summary>
            Searches for the specified item and returns the index of the first occurrence.
            </summary>
            <param name="item">The item to locate.</param>
            <returns>The index of the first found occurrence of the specified item; -1 if the item could not be found.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The index at which the item should be inserted.</param>
            <param name="item">The item to insert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of the specified item from the collection.
            </summary>
            <param name="item">The item to remove from the collection.</param>
            <returns>True if the item was successfully removed; false if it wasn't located in the collection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.NonNullCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from the collection.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.TypeConverterFactory">
            <summary>
            Factory for creating TypeConverter instances based on a provided type.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TypeConverterFactory.GetTypeConverter(System.Type)">
            <summary>
            Returns a TypeConverter instance for the specified type.
            </summary>
            <param name="type">The Type of the object to convert.</param>
            <returns>A TypeConverter instance if a suitable converter is found, otherwise null.</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.EmptyKeyedServiceProvider">
            <summary>Provides an implementation of <see cref="T:Microsoft.Extensions.DependencyInjection.IKeyedServiceProvider"/> that contains no services.</summary>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.EmptyKeyedServiceProvider.Instance">
            <summary>Gets a singleton instance of <see cref="T:Microsoft.Extensions.DependencyInjection.EmptyKeyedServiceProvider"/>.</summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EmptyKeyedServiceProvider.GetService(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EmptyKeyedServiceProvider.GetKeyedService(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EmptyKeyedServiceProvider.GetRequiredKeyedService(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.ExceptionExtensions">
            <summary>
            Exception extension methods.
            </summary>
        </member>
        <member name="M:System.ExceptionExtensions.IsCriticalException(System.Exception)">
            <summary>
            Check if an exception is of a type that should not be caught by the kernel.
            </summary>
            <param name="ex">Exception.</param>
            <returns>True if <paramref name="ex"/> is a critical exception and should not be caught.</returns>
        </member>
        <member name="M:System.EnvExtensions.GetBoolEnvVar(System.String)">
            <summary>
            Source: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/src/DiagnosticsOptions.cs
            Values: https://learn.microsoft.com/en-us/dotnet/api/azure.core.diagnosticsoptions.istelemetryenabled?view=azure-dotnet
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AsciiLettersDigitsUnderscoresRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AsciiLettersDigitsUnderscoresRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FilenameRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the FilenameRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.FilenameRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FilenameRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FilenameRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FilenameRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FilenameRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FilenameRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FilenameRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FilenameRegex_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiWordChars">
            <summary>Supports searching for characters in or not in "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".</summary>
        </member>
    </members>
</doc>
